{
    "contents" : "#' Download species information from IUCN\n#' \n#' @author Bruno Vilela\n#' \n#' @description return sepecies information from IUCN website from one or more species names, \n#' or from an object of the PresenceAbsence class.\n#' \n#' @usage lets.iucn(input)\n#' \n#' @param input character vector with one or more species names,\n#' or an object of the PresenceAbsence class.\n#' \n#' @return Return a data frame with the species name, Family, Status, \n#' Criteria used to estabilish that status (when the species is threatened), \n#' population status, the year of description and the countries where it occurs.\n#' NE = Not evaluated\n#' \n#' @details Depending on your internet conection and the number of species, the function \n#' may take some time. So, we open a count window where you can follow the progress.\n#' Note that the internet must be turned on during all the process. \n#' \n#' @import XML\n#' \n#' @seealso lets.iucn.ha\n#' \n#' @export\n\nlets.iucn <- function(input){\n  \n  if(class(input)==\"PresenceAbsence\"){\n    input <- input$S\n  }\n  \n  input <- gsub(as.matrix(input), patt=\" \", replace=\"-\")\n  \n  #vetor para guardar o status\n  ln <- length(input)\n  matriz1 <- matrix(nrow=ln)\n  status <-  matriz1\n  criterio <- matriz1\n  populacao <- matriz1\n  familia <- matriz1\n  autor <- matriz1  \n  pais <- matriz1\n  \n  cat(\"This action may take some time...\\nWe will take the liberty to open a counting window so you can follow the progress...\")\n  \n  x11(2, 2, pointsize=12)\n  par(mar=c(0, 0, 0, 0))  \n  \n  #Loop para procurar o status de cada especie da matriz no site da IUCN\n  for (i in 1:ln){\n   \n    plot.new()\n    text(0.5, 0.5, paste(paste(\"Total:\", ln, \"\\n\", \"Runs to go: \", (ln-i))))      \n  \n    h <- try(htmlParse(paste(\"http://api.iucnredlist.org/go/\",input[i], sep = \"\")),silent=TRUE)\n    \n    if((class(h)[1])==\"try-error\"){\n      status[i, 1]<-\"NE\"\n      criterio[i, 1] <-\"\"\n      populacao[i, 1]<-\"Unkown\"\n      familia[i, 1]<-\"\"\n      autor[i, 1]<-\"\"\n      pais[i, ]<-\"\"      \n    }else{\n      status[i, 1] <- try(xpathSApply(h, '//div[@id=\"red_list_category_code\"]', xmlValue), silent=TRUE)\n      criterio[i, 1] <- try(xpathSApply(h, '//div[@id=\"red_list_criteria\"]', xmlValue), silent=TRUE)\n      pop <- try(xpathSApply(h, '//div[@id=\"population_trend\"]', xmlValue), silent=TRUE)\n      populacao[i, 1] <- ifelse(is.list(pop), \"Unknown\",pop)\n      familia[i, 1] <- try(xpathSApply(h, '//div[@id=\"family\"]', xmlValue), silent=TRUE)\n      autor[i, 1] <- try(xpathSApply(h, '//div[@id=\"species_authority\"]', xmlValue), silent=TRUE)            \n      \n      ###Pais\n      distr1 <- try(xpathSApply(h, '//ul[@class=\"countries\"]', xmlValue), silent=TRUE)\n      \n      if(is.list(distr1)){\n        pais[i, 1] <- \"\"\n      }else{\n        distr2 <- try(unlist(strsplit(distr1, \"\\n\")), silent=TRUE)\n        distr2[distr2 == \"Russian Federation\"] <- \"Russia\"\n        distr2[distr2 == \"Bolivia, Plurinational States of\"] <- \"Bolivia\"\n        distr2[distr2 == \"Venezuela, Bolivarian Republic of\"] <- \"Venezuela\"\n        distr2[distr2 == \"Korea, Democratic People's Republic of\"] <- \"North Korea\"\n        distr2[distr2 == \"Congo, The Democratic Republic of the\"] <- \"Congo\"\n        distr2[distr2 == \"Tanzania, United Republic of\"] <- \"Tanzania\"\n        distr2[distr2 == \"Palestinian Territory, Occupied\"] <- \"Occupied Palestinian Territory\"\n        distr2[distr2 == \"Micronesia, Federated States of\"] <- \"Micronesia\"\n        distr2[distr2 == \"Macedonia, the former Yugoslav Republic of\"] <- \"Macedonia\"\n        distr2[distr2 == \"Korea, Republic of\"] <- \"South Korea\"\n        distr2[distr2 == \"Iran, Islamic Republic of\"] <- \"Iran\"\n        distr2[distr2 == \"Disputed Territory, Djibouti\"] <- \"Djibouti Disputed Territory\"\n        distr2[distr2 == \"Virgin Islands, U.S.\"] <- \"Virgin Islands(U.S.)\"\n        distr2[distr2 == \"Virgin Islands, British\"] <- \"Virgin Islands(British)\"\n                      \n        pais[i, 1] <- paste(distr2, collapse = \", \")\n      }     \n    }\n  }\n  \n  #Fazendo a tabela final\n  resu <- cbind(input, familia, status, criterio, populacao, autor, pais)\n  colnames(resu) <- c(\"Species\", \"Family\", \"Status\", \"Criteria\", \"Population\", \"Description_Year\", \"Country\")\n  \n  #Trocando a messagem de erro das especies que nao foram encontradas pelo status NE(not evaluated)\n  for (i in 1:nrow(resu)){\n\n    if(nchar(resu[i,2])>15){\n      resu[i, 2] <- \"\"\n    }  \n    if(nchar(resu[i,3])>2){\n      resu[i, 3] <- \"NE\"\n    }\n    if(nchar(resu[i,4])>20){\n      resu[i, 4] <- \"\"\n    }    \n    if(nchar(resu[i,5])>15){\n      resu[i, 5] <- \"Unknown\"\n    }\n    \n  }\n  \n  dev.off()\n  cat(\"\\nThank you for your patience!\")\n  \n  #Retirando os tracos e colocando de novo o espaco entre as palavras\n  resu[, 1] <- gsub(resu[, 1],patt=\"-\",replace=\" \")\n  resu[, 6] <- as.numeric(gsub(\"\\\\D\", \"\", resu[, 6]))\n  resu[, 6] <- as.numeric(substr(resu[, 6], 1, 4))\n  \n  #retorna um data frame (so para retirar as aspas que ficam se estiver no formato de matriz)\n  return(as.data.frame(resu))\n}\n",
    "created" : 1394198493067.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2319724442",
    "id" : "DDF8E2DC",
    "lastKnownWriteTime" : 1394468977,
    "path" : "C:/Users/Bruno/SkyDrive/letsR/letsR/R/IUCN.R",
    "project_path" : "R/IUCN.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "source_on_save" : false,
    "type" : "r_source"
}