r <- rasterize(resu2[, 1:2], x$R, resu2[, 3])
return(list(Matrix=resultado, raster=r))
}else{
return(resultado)
}
}
te <- lets.maplizer(resu1, resu2[-1,6], resu2[-1,1], func=mean, ras=T)
plot(te$ra)
plot(te)
te <- lets.maplizer(resu1, resu2[,6], resu2[,1], func=mean, ras=T)
plot(te$ras)
te <- lets.maplizer(resu1, resu2[,6], resu2[,1], func=mean, ras=F)
te
resu3 <- resu2
resu3[3,6] <- ""
y <- resu3
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
y
y <- resu3[,6]
y
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
y
te <- lets.maplizer(resu1, y, resu2[,1], func=mean, ras=F)
te
1*NA
rm(list=ls())
devtools::load_all(".")
library(letsR)
resu1 <- lets.presab.birds("C:/Users/Bruno/Documents/testeb", resol=2, origin=c(1, 2),
seasonal=c(1, 2), presence=c(1, 2, 3), remove.cell=T, remove.sp=T)
devtools::load_all(".")
library(raster)
library(maptools)
library(maps)
library(XML)
resu1 <- lets.presab.birds("C:/Users/Bruno/Documents/testeb", resol=2, origin=c(1, 2),
seasonal=c(1, 2), presence=c(1, 2, 3), remove.cell=T, remove.sp=T)
resu1
summary(resu1)
plot(resu1)
resu2 <- lets.iucn(resu1)
head(resu2)
resu2[,4]
resu2[,5]
resu2[,3]
x<-resu2[,3]
x
as.character(x)
x[x=="LC"]
x[x=="LC"] <- 1
x <- as.character(x)
x[x=="LC"] <- 1
x
y <- numeric(length(x))
y
x<-resu2[,3]
y <- numeric(length(x))
y[x=="LC"] <- 1
y
lets.iucncont <- function(x, dd=NA){
y[(x=="EX" | x=="EW")] <- 5
y[x=="EN"] <- 4
y[x=="CR"] <- 3
y[x=="VU"] <- 2
y[x=="NT"] <- 1
y[x=="LC"] <- 0
y[(x=="DD" | x=="NE")] <- dd
return(y)
}
lets.iucncont(resu2[,3])
library(letsR)
?lets.iucncont
library(letsR)
?lets.iucncont
?lets.iucncont
library(letsR)
resu4 <- lets.iucn.his(resu1)
resu4
apply(resu4[,-1], 1, lets.iucncont)
?apply
?lapply
lapply(resu4[,-1], 1, lets.iucncont)
head(resu4)
resu4[1:3,]
apply(resu4[1:3,-1], 1, lets.iucncont)
resu4[1:3,]
apply(resu4[1:4,-1], 1, lets.iucncont)
resu4[1:4,]
apply(resu4[1:4,-1], 1, lets.iucncont)
resu2[,4]
resu2[,3]
as.matrix(resu2[,3])
as.numeric(as.matrix(resu2[,3]))
as.vector(as.matrix(resu2[,3]))
lets.iucncont <- function(x, dd=NA){
x <- as.matrix(x)
x[(x=="EX" | x=="EW")] <- 5
x[x=="EN"] <- 4
x[x=="CR"] <- 3
x[x=="VU"] <- 2
x[x=="NT"] <- 1
x[x=="LC"] <- 0
x[(x=="DD" | x=="NE")] <- dd
if(ncol(x)==1){
x <- as.vector(x)
}else{
x <- as.data.frame(x)
}
return(X)
}
rm(x)
rm(y)
a <- lets.iucncont(resu)
a <- lets.iucncont(resu[,3])
resu1[,3]
resu2
resu2[,3]
a <- lets.iucncont(resu2[,3])
#' Transform IUCN conservation status to continuos values
#'
#' @author Bruno Vilela
#'
#' @description Transform IUCN conservation status to continuos values from 0 to 5.
#'
#' @usage lets.iucncont(x, dd=NA)
#'
#' @param x A vector or a matrix containing IUCN codes.
#' @param dd The value to be atributed to DD and NE species, the default option is NA.
#'
#' @return Return a vector with continuos values from 0 to 5.
#' @details EX and EW = 5
#'
#' EN = 4
#'
#' CR = 3
#'
#' VU = 2
#'
#' NT = 1
#'
#' LC = 0
#'
#' DD = NA
#'
#' NE = NA
#'
#' @seealso lets.iucn
#'
#' @export
lets.iucncont <- function(x, dd=NA){
x <- as.matrix(x)
x[(x=="EX" | x=="EW")] <- 5
x[x=="EN"] <- 4
x[x=="CR"] <- 3
x[x=="VU"] <- 2
x[x=="NT"] <- 1
x[x=="LC"] <- 0
x[(x=="DD" | x=="NE")] <- dd
if(ncol(x)==1){
x <- as.vector(x)
}else{
x <- as.data.frame(x)
}
return(X)
}
#' Transform IUCN conservation status to continuos values
#'
#' @author Bruno Vilela
#'
#' @description Transform IUCN conservation status to continuos values from 0 to 5.
#'
#' @usage lets.iucncont(x, dd=NA)
#'
#' @param x A vector or a matrix containing IUCN codes.
#' @param dd The value to be atributed to DD and NE species, the default option is NA.
#'
#' @return Return a vector with continuos values from 0 to 5.
#' @details EX and EW = 5
#'
#' EN = 4
#'
#' CR = 3
#'
#' VU = 2
#'
#' NT = 1
#'
#' LC = 0
#'
#' DD = NA
#'
#' NE = NA
#'
#' @seealso lets.iucn
#'
#' @export
lets.iucncont <- function(x, dd=NA){
x <- as.matrix(x)
x[(x=="EX" | x=="EW")] <- 5
x[x=="EN"] <- 4
x[x=="CR"] <- 3
x[x=="VU"] <- 2
x[x=="NT"] <- 1
x[x=="LC"] <- 0
x[(x=="DD" | x=="NE")] <- dd
if(ncol(x)==1){
x <- as.vector(x)
}else{
x <- as.data.frame(x)
}
return(x)
}
a <- lets.iucncont(resu2[,3])
a
#' Transform IUCN conservation status to continuos values
#'
#' @author Bruno Vilela
#'
#' @description Transform IUCN conservation status to continuos values from 0 to 5.
#'
#' @usage lets.iucncont(x, dd=NA)
#'
#' @param x A vector or a matrix containing IUCN codes.
#' @param dd The value to be atributed to DD and NE species, the default option is NA.
#'
#' @return Return a vector with continuos values from 0 to 5.
#' @details EX and EW = 5
#'
#' EN = 4
#'
#' CR = 3
#'
#' VU = 2
#'
#' NT = 1
#'
#' LC = 0
#'
#' DD = NA
#'
#' NE = NA
#'
#' @seealso lets.iucn
#'
#' @export
lets.iucncont <- function(x, dd=NA){
x <- as.matrix(x)
x[(x=="EX" | x=="EW")] <- 5
x[x=="EN"] <- 4
x[x=="CR"] <- 3
x[x=="VU"] <- 2
x[x=="NT"] <- 1
x[x=="LC"] <- 0
x[(x=="DD" | x=="NE")] <- dd
if(ncol(x)==1){
x <- as.numeric(as.vector(x))
}else{
x <- as.data.frame(x)
}
return(x)
}
a <- lets.iucncont(resu2[,3])
a
ncol(resu2)
a <- lets.iucncont(resu2[,-7])
a
a <- lets.iucncont(resu4)
a
library(letsR)
a <- lets.iucncont(resu2[,3])
a
class(a)
a <- lets.iucncont(resu2[,-7])
a
class(a[,3])
resu1
resu2[,5]
resu2[,6]
x <- resu1
y <- resu2[,6]
z<- resu2[,1]
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
y
p <- x$P[, -(1:2)]
p
i=1
x$S[1]
p[,(i+2)]
p[,(i+2)]==1
p[p[,(i+2)]==1, ]
p2 <- p[p[,(i+2)]==1, ]
head(p2)
p2 <- p[(p[,(i+2)]==1), ]
head(p2)
p2 <- p[(p[,i]==1), ]
head(p2)
head(p2)
rowSums(p2)
colSums(p2)
colSums(p2[-1])
p2[,-i]
colSums(p2[,-i])
names(somas)
somas <- colSums(p2[,-i])
names(somas)
x$S
nomes <- names(somas)
nomes
p2 <- p
for(i in 1:ncol(p2)){
pos <- which(x$S[i]==z)
if(length(pos)>0){
p2[, i] <- p2[, i]*y[pos]
pos2 <- which(p2[, i]==0)
p2[pos2, i] <- NA
}else{
p2[, i] <- NA
}
}
p2
p3 <- p[(p[,i]==1), ]
p3
mult <- p3*p4
pos3 <- p[, i]==1)
pos3 <- p[, i]==1
pos3
p3 <- p[pos3, ]
p4 <- p2[pos3, ]
mult <- p3*p4
mult
mean(mult, na.rm=T)
lets.field <- function(x, y, z, weigth=T){
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
p <- x$P[, -(1:2)]
p2 <- p
for(i in 1:ncol(p2)){
pos <- which(x$S[i]==z)
if(length(pos)>0){
p2[, i] <- p2[, i]*y[pos]
pos2 <- which(p2[, i]==0)
p2[pos2, i] <- NA
}else{
p2[, i] <- NA
}
}
media <- numeric(ncol(p))
for(i in 1:length(media)){
pos3 <- p[, i]==1
p3 <- p[pos3, ]
p4 <- p2[pos3, ]
mult <- p3*p4
if(weigth==T){
media[i] <- mean(mult, na.rm=T)
}
if(weigth==F){
me <- colMeans(mult, na.rm=T)
media[i] <- mean(me, na.rm=T)
}
}
resultado <- cbind(x$S, media)
return(resultado)
}
rm(x)
rm(y)
rm(z)
rm(weigth)
fiel <- lets.field(resu1, resu2[, 6], resu2[, 1])
fiel
lets.field <- function(x, y, z, weigth=T){
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
p <- x$P[, -(1:2)]
p2 <- p
for(i in 1:ncol(p2)){
pos <- which(x$S[i]==z)
if(length(pos)>0){
p2[, i] <- p2[, i]*y[pos]
pos2 <- which(p2[, i]==0)
p2[pos2, i] <- NA
}else{
p2[, i] <- NA
}
}
media <- numeric(ncol(p))
for(i in 1:length(media)){
pos3 <- p[, i]==1
p3 <- p[pos3, ]
p4 <- p2[pos3, ]
mult <- p3*p4
if(weigth==T){
media[i] <- mean(mult, na.rm=T)
}
if(weigth==F){
me <- colMeans(mult, na.rm=T)
media[i] <- mean(me, na.rm=T)
}
}
resultado <- cbind(x$S, media)
colnames(resultado) <- c("Species", "Value")
return(as.data.frame(resultado))
}
fiel <- lets.field(resu1, resu2[, 6], resu2[, 1])
fiel
lets.field <- function(x, y, z, weigth=T){
if(is.factor(y)){
y <- as.numeric(levels(y))[y]
}
p <- x$P[, -(1:2)]
p2 <- p
for(i in 1:ncol(p2)){
pos <- which(x$S[i]==z)
if(length(pos)>0){
p2[, i] <- p2[, i]*y[pos]
pos2 <- which(p2[, i]==0)
p2[pos2, i] <- NA
}else{
p2[, i] <- NA
}
}
media <- numeric(ncol(p))
for(i in 1:length(media)){
pos3 <- p[, i]==1
p3 <- p[pos3, -i]
p4 <- p2[pos3, -i]
mult <- p3*p4
if(weigth==T){
media[i] <- mean(mult, na.rm=T)
}
if(weigth==F){
me <- colMeans(mult, na.rm=T)
media[i] <- mean(me, na.rm=T)
}
}
resultado <- cbind(x$S, media)
colnames(resultado) <- c("Species", "Value")
return(as.data.frame(resultado))
}
fiel <- lets.field(resu1, resu2[, 6], resu2[, 1])
fiel
cor(resu2[, 6], fiel[, 2])
cor(as.numeric(levels(resu2[, 6]))[resu2[, 6]], fiel[, 2])
cor(as.numeric(levels(resu2[, 6]))[resu2[, 6]], as.numeric(levels(fiel[, 2]))[fiel[, 2]])
library(letsR)
#Packages
library(raster)
library(maptools)
library(maps)
library(XML)
devtools::load_all(".")
amphi <- readShapePoly("C:/Users/Bruno/Documents/Spatial data/All_AMPHIBIANS_NOV2013/All_AMPHIBIANS_NOV2013.shp", delete_null_obj=TRUE)
resu <- lets.presab(amphi, resol=1, remove.cell=T, remove.sp=T)
resu_iuc <- lets.iucn(resu1)
risco <- lets.iucncont(resu1[, 3])
resu_iuc <- lets.iucn(resu)
risco <- lets.iucncont(resu_iuc[, 3])
valor <- lets.field(resu, risco, resu_iuc)
cor(risco, valor)
risco
valor
which(is.na(risco) | is.na(valor))
ret <- which(is.na(risco) | is.na(valor))
cor(risco[-ret], valor[-ret])
valor
ret <- which(is.na(risco) | is.na(valor[,2]))
cor(risco[-ret], valor[-ret,2])
class(valor[,2])
class(risco)
valor[,2] <- as.numeric(levels(valor[,2]))[valor[,2]]
class(valor[,2])
ret <- which(is.na(risco) | is.na(valor[,2]))
cor(risco[-ret], valor[-ret,2])
plot(risco[-ret], valor[-ret,2])
barplot(risco[-ret], valor[-ret,2])
boxplot(risco[-ret], valor[-ret,2])
valor
risco
boxplot(risco[-ret], valor[-ret,2])
plot(risco[-ret], valor[-ret,2])
lm(valor ~ risco)
lm(valor~risco)
lm(valor[-ret,2]~risco[-ret])
modelo <- lm(valor[-ret,2]~risco[-ret])
summar(modelo)
summary(modelo)
modelo <- lm(valor[-ret,2]~as.factor(risco[-ret]))
summary(modelo)
plot(valor[-ret,2]~as.factor(risco[-ret]))
head(resu_iuc)
resu_iuc[,6] <- as.numeric(levels(resu_iuc[,6]))[resu_iuc[,6]]
modelo <- lm(as.factor(risco[-ret])~valor[-ret,2])
modelo <- lm(risco[-ret]~valor[-ret,2])
modelo
summary(modelo)
modelo <- lm(risco[-ret]~valor[-ret,2]+resu_iuc[-ret,6])
modelo <- lm(risco[-ret]~valor[-ret,2]+resu_iuc[-ret,6])
summary(modelo)
modelo <- lm(risco[-ret]~valor[-ret,2]+resu_iuc[-ret,6]+resu_iuc[-ret,2])
summary(modelo)
class(resu_iuc[-ret,2])
modelo <- lm(risco[-ret]~valor[-ret,2]+resu_iuc[-ret,6]+resu_iuc[-ret,2])
summary(modelo)
cor(risco[-ret],valor[-ret,2])
?as.data.frame
