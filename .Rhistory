#' @usage lets.summarize(x, pos, xy=TRUE, fun=mean)
#'
#' @param x Presence-absence matrix with variables added.
#' @param pos Column position of the variables.
#' @param xy Logical, if \code{TRUE} the matrix contains the coordinates in the first two columns.
#' @param fun Function to be used to summary the variable per species.
#'
#' @seealso \code{\link{lets.addvar}}
#' @seealso \code{\link{lets.addpoly}}
#'
#'
#' @export
lets.summarize <- function(x, pos, xy=TRUE, fun=mean){
var <- x[, pos]
sp <- x[, -pos]
if(xy==TRUE){
sp <- sp[, -(1:2)]
}
Species <- colnames(sp)
n <- length(Species)
resum <- matrix(NA, nrow=n, ncol=length(pos))
colnames(resum) <- colnames(var)
var <- as.matrix(var)
for(i in 1:n){
vari <- var[(sp[, i]==1), ]
if(!is.matrix(vari)){
vari <- as.matrix(vari)
}
resum[i, ] <- apply(vari, 2, fun, na.rm=TRUE)
}
resul <- as.data.frame(cbind(Species, resum))
for(i in 2:ncol(resul)){
resul[, i] <- as.numeric(levels(resul[, i]))[resul[, i]]
}
return(resul)
}
summarizado <- lets.summarize(pamfoot, ncol(pamfoot))
head(sumarizado)
head(summarizado)
summary(summarizado)
is.na(summarizado)
sum(is.na(summarizado))
which(is.na(summarizado))
which(is.na(summarizado[,2]))
summarizado[which(is.na(summarizado[,2])),2]
summarizado[which(is.na(summarizado[,2])), ]
i=2815
vari <- var[(sp[, i]==1), ]
head(vari)
sp[, i]
sp[, i]==1
sum(sp[, i]==1)
summary(pamfoot[,ncol(pamfoot)])
save.image("C:/Users/Bruno/Desktop")
library(letsR)
library(letsR)
library(letsR)
matrix(20:30, nrow=20, ncol=2)
matrix(20:30, nrow=20, ncol=2) -> xy
lets.distmat(xy, count=TRUE)
library(letsR)
?lets.presab
data(PAM)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
terra <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp")
library(maptools)
library(raster)
terra <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp")
terra <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp", repair=T)
terra <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp",
repair=T)
plot(terra)
PAM
?extract
celulas <- extract(terra, PAM$R, cellnumbers=T, weights=T, small=T)
celulas <- extract(PAM$R, terra, cellnumbers=T, weights=T, small=T)
celulas2 <- do.call(rbind.data.frame, celulas)
celulas2
head(celulas2)
celulas2 <- do.call(rbind.data.frame, celulas)[, 1]
head(celulas2)
celulas.2 <- extract(PAM$R, PAM$M[,1:2], cellnumbers=T)
PAM$M[,1:2]
PAM$M
celulas.2 <- extract(PAM$R, PAM$P[, 1:2], cellnumbers=T)
head(celulas.2)
celulas.2 <- extract(PAM$R, PAM$P[, 1:2], cellnumbers=T)[, 1]
!match(celulas, celulas2)
?match
!match(celulas.2, celulas2)
match(celulas.2, celulas2)
which(is.na(match(celulas.2, celulas2)))
values(PAM$R)[which(is.na(match(celulas.2, celulas2)))] <- NA
plot(PAM$R)
data(PAM)
values(PAM$R)[which(is.na(match(celulas2, celulas.2)))] <- NA
plot(PAM$R)
values(PAM$R)
values(PAM$R)[-celulas2] <- NA
plot(PAM$R)
data(PAM)
values(PAM$R)[-celulas2] <- NA
plot(PAM$R)
celulas.2 <- extract(PAM$R, PAM$P[, 1:2])
celulas.2
PAM$P <- PAM$P[!is.na(celulas.2), ]
PAM
PAM$P
head(PAM$P)
# Function to remove species with zero values in PresenceAbscence matrix
# Bruno Vilela
.removeSp <- function(x){
if(nrow(as.matrix(x))==1){
nomes <- colnames(x)
x <- as.vector(x)
names(x) <- nomes
}
if(is.vector(x)){
x <- x[!x==0]
nomes <- names(x)
x <- matrix(x, ncol=length(x))
colnames(x) <- nomes
}else{
rem <- which(colSums(x[,-(1:2)])==0)+2
if(length(rem)>0){
x <- x[, -rem]
}
}
return(x)
}
# Function to remove cells with zero values in PresenceAbscence matrix
# Bruno Vilela
.removeCells <- function(x){
rem <- which(rowSums(as.matrix(x[, -c(1, 2)]))==0)
if(length(rem)>0){
x <- x[-rem, ]
}
if(is.vector(x)){
nomes <- names(x)
x <- matrix(x, ncol=length(x))
colnames(x) <- nomes
}
return(x)
}
PAM$S
PAM$S <- colnames(PAM$P)[-1:2]
colnames(PAM$P)
colnames(PAM$P)[-1:2]
PAM$S <- colnames(PAM$P)[-(1:2)]
PAM$S
#' Crop a PAM object from a shapefile
#'
#' @author Bruno Vilela
#'
#' @description Crop a PresenceAbsence object based on a shapefile.
#'
#' @param PAM A PresenceAbsence object to be croped.
#' @param shp Object of class SpatialPolygonsDataFrame (see function \code{\link{readShapePoly}} to to crop the PresenceAbsence object.
#' @param remove.cells Logical, if \code{TRUE} the final matrix will not contain cells in the grid with a value of zero (i.e. sites with no species present).
#' @param remove.sp Logical, if \code{TRUE} the final matrix will not contain species that do not match any cell in the grid.
#'
#'
#' @return The result is an object of class PresenceAbsence croped.
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.PAMcrop <- function(PAM, shp, remove.cells=TRUE, remove.sp=TRUE){
remover1 <- extract(PAM$R, shp, cellnumbers=T, weights=T, small=T)
remover2 <- do.call(rbind.data.frame, remover1)[, 1]
values(PAM$R)[-remover2] <- NA
manter <- extract(PAM$R, PAM$P[, 1:2])
PAM$P <- PAM$P[!is.na(manter), ]
if(remove.cells){
Resultado <- .removeCells(Resultado)
}
if(remove.sp){
Resultado <- .removeSp(Resultado)
}
PAM$S <- colnames(PAM$P)[-(1:2)]
return(PAM)
}
data(PAM)
shp <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp",
repair=T)
PAMcrop <- lets.PAMcrop(PAM, shp)
#' Crop a PAM object from a shapefile
#'
#' @author Bruno Vilela
#'
#' @description Crop a PresenceAbsence object based on a shapefile.
#'
#' @param PAM A PresenceAbsence object to be croped.
#' @param shp Object of class SpatialPolygonsDataFrame (see function \code{\link{readShapePoly}} to to crop the PresenceAbsence object.
#' @param remove.cells Logical, if \code{TRUE} the final matrix will not contain cells in the grid with a value of zero (i.e. sites with no species present).
#' @param remove.sp Logical, if \code{TRUE} the final matrix will not contain species that do not match any cell in the grid.
#'
#'
#' @return The result is an object of class PresenceAbsence croped.
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.PAMcrop <- function(PAM, shp, remove.cells=TRUE, remove.sp=TRUE){
remover1 <- extract(PAM$R, shp, cellnumbers=T, weights=T, small=T)
remover2 <- do.call(rbind.data.frame, remover1)[, 1]
values(PAM$R)[-remover2] <- NA
manter <- extract(PAM$R, PAM$P[, 1:2])
PAM$P <- PAM$P[!is.na(manter), ]
if(remove.cells){
PAM$P <- .removeCells(PAM$P)
}
if(remove.sp){
PAM$P <- .removeSp(PAM$P)
}
PAM$S <- colnames(PAM$P)[-(1:2)]
return(PAM)
}
PAMcrop <- lets.PAMcrop(PAM, shp)
summary(PAMcrop)
PAMcrop
plot(PAMcrop)
library(maps)
plot(PAMcrop)
#' Crop a PAM object from a shapefile
#'
#' @author Bruno Vilela
#'
#' @description Crop a PresenceAbsence object based on a shapefile.
#'
#' @param x A PresenceAbsence object to be croped.
#' @param shp Object of class SpatialPolygonsDataFrame (see function \code{\link{readShapePoly}} to to crop the PresenceAbsence object.
#' @param remove.cells Logical, if \code{TRUE} the final matrix will not contain cells in the grid with a value of zero (i.e. sites with no species present).
#' @param remove.sp Logical, if \code{TRUE} the final matrix will not contain species that do not match any cell in the grid.
#'
#'
#' @return The result is an object of class PresenceAbsence croped.
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.PAMcrop <- function(x, shp, remove.cells=TRUE, remove.sp=TRUE){
remover1 <- extract(x$R, shp, cellnumbers=T, weights=T, small=T)
remover2 <- do.call(rbind.data.frame, remover1)[, 1]
values(x$R)[-remover2] <- NA
manter <- extract(x$R, x$P[, 1:2])
x$P <- x$P[!is.na(manter), ]
if(remove.cells){
x$P <- .removeCells(x$P)
}
if(remove.sp){
x$P <- .removeSp(x$P)
}
x$S <- colnames(x$P)[-(1:2)]
return(x)
}
PAMcrop <- lets.PAMcrop(PAM, shp)
plot(PAMcrop)
shp
plot(shp, col="black", add=T)
x=PAM
remover1 <- extract(x$R, shp, cellnumbers=T, weights=T, small=T)
remover2 <- do.call(rbind.data.frame, remover1)[, 1]
values(x$R)[-remover2] <- NA
plot(x$R)
manter <- extract(x$R, x$P[, 1:2])
x$P <- x$P[!is.na(manter), ]
if(remove.cells){
x$P <- .removeCells(x$P)
}
if(remove.sp){
x$P <- .removeSp(x$P)
}
remove.cells=TRUE
remove.sp=TRUE
if(remove.cells){
x$P <- .removeCells(x$P)
}
if(remove.sp){
x$P <- .removeSp(x$P)
}
plot(x$R)
x$S <- colnames(x$P)[-(1:2)]
class(x)
plot(x)
x$R
class(x) <- "PresenceAbsence"
plot(x)
names(x)
x[[3]]
#' Crop a PAM object from a shapefile
#'
#' @author Bruno Vilela
#'
#' @description Crop a PresenceAbsence object based on a shapefile.
#'
#' @param x A PresenceAbsence object to be croped.
#' @param shp Object of class SpatialPolygonsDataFrame (see function \code{\link{readShapePoly}} to to crop the PresenceAbsence object.
#' @param remove.cells Logical, if \code{TRUE} the final matrix will not contain cells in the grid with a value of zero (i.e. sites with no species present).
#' @param remove.sp Logical, if \code{TRUE} the final matrix will not contain species that do not match any cell in the grid.
#'
#'
#' @return The result is an object of class PresenceAbsence croped.
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.PAMcrop <- function(x, shp, remove.cells=TRUE, remove.sp=TRUE){
remover1 <- extract(x$R, shp, cellnumbers=T, weights=T, small=T)
remover2 <- do.call(rbind.data.frame, remover1)[, 1]
values(x[[2]])[-remover2] <- NA
manter <- extract(x$R, x$P[, 1:2])
x[[1]] <- x$P[!is.na(manter), ]
if(remove.cells){
x[[1]] <- .removeCells(x$P)
}
if(remove.sp){
x[[1]] <- .removeSp(x$P)
}
x[[3]] <- colnames(x$P)[-(1:2)]
return(x)
}
data(PAM)
PAMcrop <- lets.PAMcrop(PAM, shp)
plot(PAMcrop)
summary(PAMcrop)
PAMcrop
?rasterize
grid <- rasterToPolygons(PAM$P)
grid <- rasterToPolygons(PAM$R)
grid
plot(grid)
plot(PAM$R)
plot(grid, add=T)
grid
names(grid)
grid$layer
slotnames(grid)
slotNames(grid)
grid@polygons
PAM$R
grid <- rasterToPolygons(PAMcrop$R)
plot(PAMcrop$R)
plot(grid, add=T)
grid
values(grid)
slotNames(grid)
grid@data
slotNames(grid)
grid@data <- 1:nrow(grid@data)
1:nrow(grid@data)
grid@data[1, ] <- 1:nrow(grid@data)
grid@data[ ,1] <- 1:nrow(grid@data)
plot(grid)
grid
a <- rasterize(grid, PAMcrop$R)
plot(a)
plot(grid, add=T)
?writeSpatialShape
writeSpatialShape(grid, "C:/Users/Bruno/Documents/grid")
?rasterToPolygons
grid
?rasterize
r <- rasterize(grid, PAMcrop$R, 0:(nrow(grid@data)-1))
plot(r)
FID <- extract(PAMcrop$P[, 1:2])
FID <- extract(grid, PAMcrop$P[, 1:2])
FID <- extract(PAMcrop$P[, 1:2], grid)
?extract
FID <- extract(r, PAMcrop$P[, 1:2])
FID
resultado <- cbind(FID, PAMcrop$P)
resultado
resultado[1:5,1:5]
grid@data
head(grid@data)
?SpatialPolygonsDataFrame
#' Fits a PAM object into a grid
#'
#' @author Bruno Vilela
#'
#' @description This function create a grid in shapefile format and add its IDs to the presence absence matrix.
#' The function was created to make easier the use of Presence Absence Matrix for the ones who prefer to work into a grid in shapefile.
#'
#' @param x A PresenceAbsence object.
#'
#' @return The result is a list of two objects. The first is a grid in shapefile format;
#' the second is a presence absence matrix with an aditional column called FID.
#' SP_ID (shapefile cell identifier).
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.gridirizer <- (x){
grid <- rasterToPolygons(x$R)
r <- rasterize(grid, x$R, 1:nrow(grid@data))
SP_ID <- extract(r, x$P[, 1:2])
resultado <- cbind(FID, x$P)
return(list("Grid"=grid, "Presence Absence Matrix"=resultado))
}
lets.gridirizer <- function(x){
grid <- rasterToPolygons(x$R)
r <- rasterize(grid, x$R, 1:nrow(grid@data))
SP_ID <- extract(r, x$P[, 1:2])
resultado <- cbind(FID, x$P)
return(list("Grid"=grid, "Presence Absence Matrix"=resultado))
}
rm(list=ls())
library(letsR)
data(PAM)
PAMcrop <- lets.PAMcrop(PAM, shp)
shp <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp",
repair=T)
PAMcrop <- lets.PAMcrop(PAM, shp)
gridirized <- lets.gridirizer(PAMcrop)
plot(PAMcrop)
rm(list=ls())
library(letsR)
data(PAM)
shp <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp",
repair=T)
PAMcrop <- lets.PAMcrop(PAM, shp)
gridirized <- lets.gridirizer(PAMcrop)
names(gridirized)
plot(gridirized$Grid, add=T)
head(gridirized$P)
writeSpatialShape(gridirized$Grid, "C:/Users/Bruno/Documents/grid")
head(gridirizedGrid@data)
head(gridirized$Grid@data)
colnames(gridirized$Grid@data) <- "Species_Richness"
head(gridirized$Grid@data)
#' Fits a PAM object into a grid
#'
#' @author Bruno Vilela
#'
#' @description This function create a grid in shapefile format and add its IDs to the presence absence matrix.
#' The function was created to make easier the use of Presence Absence Matrix for the ones who prefer to work into a grid in shapefile.
#'
#' @param x A PresenceAbsence object.
#'
#' @return The result is a list of two objects. The first is a grid in shapefile format;
#' the second is a presence absence matrix with an aditional column called FID.
#' SP_ID (shapefile cell identifier).
#'
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#'
#'
#' @export
lets.gridirizer <- function(x){
grid <- rasterToPolygons(x$R)
r <- rasterize(grid, x$R, 1:nrow(grid@data))
SP_ID <- extract(r, x$P[, 1:2])
resultado <- cbind(SP_ID, x$P)
colnames(grid@data) <- "Species_Richness"
return(list("Grid"=grid, "Presence Absence Matrix"=resultado))
}
gridirized <- lets.gridirizer(PAMcrop)
writeSpatialShape(gridirized$Grid, "C:/Users/Bruno/Documents/grid")
writeSpatialShape(gridirized$Grid, "C:/Users/Bruno/Documents/grid2")
gridirized$Grid
gridirized$Grid@pol
gridirized$Grid@Polygons
gridirized$Grid@polygons
names(gridirized$Grid@polygons)
length(gridirized$Grid@polygons)
slotnames(gridirized$Grid@polygons)
slotNames(gridirized$Grid@polygons)
slotNames(gridirized$Grid@polygons[[1]])
slotNames(gridirized$Grid@polygons[[1]]@Polygons)
gridirized$Grid@polygons[[1]]@Polygons
gridirized$Grid@polygons[[1]]@Polygons@coord
gridirized$Grid@polygons[[1]]@Polygons[[1]]@coord
gridirized$Grid@polygons[[1]]@Polygons[[1]]@coords
for(i in 1:350){
print(gridirized$Grid@polygons[[i]]@Polygons[[1]]@coords)
}
plot(PAMcrop)
plot(gridirized$Grid, add=T)
rm(list=ls())
library(letsR)
?lets.presab
library(letsR)
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
require(maps)
plot(PAM)  # Species richness map
plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
resu1 <- lets.presab.birds("C:/Users/Bruno/Documents/Birds/Picidae",
resol=2, origin=c(1, 2), seasonal=c(1, 2),
presence=c(1, 2, 3), count=TRUE)
resu1 <- lets.presab.birds("C:/Users/Bruno/Documents/Birds/Picidae",
resol=6, origin=c(1, 2), seasonal=c(1, 2),
presence=c(1, 2, 3), count=TRUE)
resu1
