}
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
head(pamvar)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
x=pamvar; pos=ncol(pamvar); xy=TRUE
if(xy==TRUE){
sps <- x[, -c(1, 2, pos)]
}else{
sps <- x[, -pos]
}
ric <- ncol(sps)
groups=="default"
groups="default"
freq <- hist(x[, pos], plot=FALSE)$breaks
groups <- length(freq)
groups
freq
hist(x[, pos], plot=FALSE)
#' Fucntion to count for frequency distribution along a variable
#'
#' @author Bruno Vilela
#'
#' @description Based on a Presence-Absence matrix with variables added (see \code{\link{lets.addvar}}), the function divides a continuous variable into classes and count the occurence frequency of each species in each class.
#'
#' @usage lets.classvar(x, groups="default", pos, xy)
#'
#' @param x Presence-absence matrix with a unique variable added.
#' @param pos Column position of the variables.
#' @param groups The number of classes wanted for the variable. Default calculates the number of classes default for a histogram (\code{\link{hist}}).
#' @param xy Logical, if \code{TRUE} the matrix contains the coordinates in the first two columns.
#'
#' @export
lets.classvar <- function(x, groups="default", pos, xy){
if(xy==TRUE){
sps <- x[, -c(1, 2, pos)]
}else{
sps <- x[, -pos]
}
ric <- ncol(sps)
if(groups=="default"){
freq <- hist(x[, pos], plot=FALSE)$breaks
groups <- length(freq)-1
}else{
freq <- hist(x[, pos], groups, plot=FALSE)$breaks
}
freqi <- matrix(ncol=groups, nrow=ric)
for(i in 1:ric){
freqi[i, ] <- hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$density
}
nomes <- numeric(groups)
for(j in 1:groups){
nomes[j] <- paste(freq[j], ":", freq[j+1], sep="")
}
rownames(freqi) <- colnames(sps)
colnames(freqi) <- nomes
return(freqi)
}
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
resu
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
resu
library(letsR)
library(letsR)
ls(0)
ls()
rm(list=ls())
q()
library(letsR)
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(sp)
library(vegna)
library(vegan)
?vegan
??taxonomic
library(letsR)
?lets.correl
library(pver)
library(pvr)
library(PVR)
?PVR
#library(devtools)
#install_github("BrunoVilela/letsR")
#Packages
library(ape)
library(phytools)
library(devtools)
library(letsR)
library(caper)
library(vegan)
library(PVR)
library(multcomp)
setwd("C:/Users/Bruno/Documents/Bruno - pcDocumentos/Doutorado/Tese/Trabalho Tamanho Status")
load("filos.RData")
nomes_by2
nomes_by2%in%nomes
sum(nomes_by2%in%nomes)
length(nomes_by2)-sum(nomes_by2%in%nomes)
sum(nomes_by2%in%nomes)
sum(n_by%in%n_2)
length(n_by)
setwd('C:/Users/Bruno/Documents/Bruno - pcDocumentos/Doutorado/Tese/Trabalho Tamanho Status')
year
resu_test <- lm(IUCN_c~log(Body)+c1+c3, data=d_var2)
resu_test
resu_test <- glm(IUCN_c~log(Body)+c1+c3, data=d_var2)
resu_test <- glm(factor(IUCN_c)~log(Body)+c1+c3, data=d_var2)
resu_test <- lm(factor(IUCN_c)~log(Body)+c1+c3, data=d_var2)
resu_test
summary(resu_test)
?glm
IUCN_c
IUCN_c
d_var2
head(d_var2)
resu_test <- lm(IUCN_n~log(Body)+c1+c3, family=, data=d_var2)
resu_test <- lm(IUCN_n~log(Body), family=, data=d_var2)
resu_test <- lm(IUCN_n~log(Body),  data=d_var2)
resu_test
d_var2$IUCN_n
as.numeric(d_var2$IUCN_n)
resu_test <- lm(as.nueric(IUCN_n)~log(Body),  data=d_var2)
resu_test <- lm(as.numeric(IUCN_n)~log(Body),  data=d_var2)
resu_test
summary(resu_test)
plot(as.numeric(IUCN_n)~log(Body))
plot(as.numeric(IUCN_n)~log(Body)
)
plot(as.numeric(IUCN_n)~log(Body), data=d_var2)
head(d_var2)
resu_test <- lm(as.numeric(IUCN_n)~log(Body)+Year,  data=d_var2)
summary(resu_test)
resu_test
summary(resu_test)
cor(log(Body),Year,  data=d_var2)
cor(log(d_var2$Body),d_var2$Year)
head(d_var2)
d_var2$IUNC_n
d_var2$IUCN_n
?lets.iucncont
d_var2 <- lets.iucncont(d_var2$IUCN_n, dd=0, ne=-1)
d_var2
d_var2 <- lets.iucncont(d_var2$IUCN_c, dd=0, ne=-1)
d_var2$IUCN_c
d_var2$IUCN_n
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(sp)
library(devtools)
library(letsR)
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
library(raster)
pamvar <- lets.addvar(PAM, temp)
plot(temp)
temp <- raster("C:/Users/Bruno/Documents/Desktop/Daniel Amazonia/bio_1amcentsul.asc")
temp
plot(temp)
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
head(pamvar)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
resu
head(resu)
hist(runif(100))
hist(runif(100))->a
names(a)
a$counts
rm(list=ls())
library(letsR)
temp <- raster("C:/Users/Bruno/Documents/Desktop/Daniel Amazonia/bio_1amcentsul.asc")
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
head(pamvar)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE)
head(resu)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=45)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=30)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=5)
head(resu)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=100)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=20)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=11)
head(resu)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=9)
x=pamvar; pos=ncol(pamvar); xy=TRUE; groups=9
if(xy==TRUE){
sps <- x[, -c(1, 2, pos)]
}else{
sps <- x[, -pos]
}
ric <- ncol(sps)
ric
freq <- hist(x[, pos], groups, plot=FALSE)$breaks
freq
length(freq)
groups
freqi <- matrix(ncol=groups, nrow=ric)
freqi
groups=10
freq <- hist(x[, pos], groups, plot=FALSE)$breaks
length(freq)
freq <- hist(x[, pos], groups, plot=FALSE)$breaks
length(freq)
?hist
hist(runif(100))
hist(runif(100), 10)
hist(runif(100), 9)
hist(runif(100), 10)
hist(runif(100), 9)
hist(runif(100), 10)
hist(runif(100), 9)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
freqi <- matrix(ncol=groups, nrow=ric)
freqi
groups
length(freq)
freq <- hist(x[, pos], groups, plot=FALSE)$breaks
i=1
freqi[i, ] <- hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
length(hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts)
?quantile
x[(sps[, i]==1), pos]
x[, pos]
quantile(x[, pos], seq(0,1,1/10))
freq
length(quantile(x[, pos], seq(0,1,1/10)))
freq <- quantile(x[, pos], seq(0, 1, (1/groups)))
freqi <- matrix(ncol=groups, nrow=ric)
i=1
groups
freqi[i, ] <- hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
length(hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts)
library(letsR)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
resu
?round
round(0.3232323, 2)
round(0.3232323, 3)
freq
round(freq, 2)
library(letsR)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
head(resu)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=45)
head(resu)
?quantile
freq <- quantile(x[, pos], seq(0, 1, (1/groups)), na.rm=TRUE)
?hist
hist(temperature)
hist(values(temperature))
values(temperature)
temperature
library(letsR)
?dist
?vegdist
library(letsR)
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
moran <- lets.correl(var, distan, 10, equidistant=TRUE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
library(letsR)
library(maps)
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
plot(Phyllomedusa)
library(rgdal)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
PAM
names(PAM)
head(PAM$P)
Phyllomedusa
test <- lets.iucn(PAM$S)
head(test)
lets.presab.points
?lets.presab.points
library(letsR)
?lets.presab
data(Phyllomedusa)
library(rgdal)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)
library(maps)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")
?lets.midpoint
mid <- lets.midpoint(PAM)
mid
lets.iucn("homo sapiens")
lets.iucn.ha("homo sapiens")
lets.iucn.his("homo sapiens")
library(letsR)
a <- read.table("clipboard", sep="\t", header=TRUE)
library(raster)
r <- raster(res=1/4)
a2 <- rasterize(a[,c(1,2)], r, values=a[,c(3, ncol(a))])
plot(a2)
ex <- drawExtent()
a3 < -crop(a2, ex)
a3 <-crop(a2, ex)
plot(a3)
a3
a2 <- rasterize(a[,c(1,2)], r, values=a[,4])
#ex <- drawExtent()
a3 <-crop(a2, ex)
plot(a3)
a3
a[,4]
a2 <- rasterize(a[,c(1,2)], r, values=a[,4])
a3 <-crop(a2, ex)
plot(a3)
?rasterize
a2 <- rasterize(a[,c(1,2)], r, field=a[,4])
#ex <- drawExtent()
a3 <-crop(a2, ex)
plot(a3)
a3
a2 <- rasterize(a[,c(1,2)], r, field=a[,3:ncol(a)])
a3 <-crop(a2, ex)
plot(a3)
a3
library(aps)
library(maps)
library(rgdal)
library(letsR)
?lets.presab
data(Phyllomedusa)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
PAM
summary(PAM)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")
lets.iucn("Panthera onca")
filo <- read.nexus("Filo_srg_puts_total_f50F.nex")
# Packages
library(letsR)
library(maps)
library(ape)
library(PVR)
library(vegan)
library(geosphere)
library(rgdal)
