# Standard deviation of temperature
PAM_temp_sd <- lets.addvar(PAM, temp, fun = sd, onlyvar = TRUE)
# Mean and SD in the PAM
PAM_temp_mean_sd <- cbind(PAM_temp_mean, PAM_temp_sd)
head(PAM_temp_mean_sd)
library(letsR)
?lets.addvar
data(iucn)
data(IUCN)
IUCN
tempstack <- stack(temp, temp)
tempstack
PAM_temp_mean <- lets.addvar(PAM, tempstack)
PAM_temp_mean
PAM_temp_mean <- lets.addvar(PAM, tempstack, fun = c(mean, sd))
library(testthat)
context("Test for lets.addvar")
data(PAM)
data(temp)
tempstack <- stack(temp, temp)
test_that("lets.addvar works fine", {
skip_on_cran()
PAM_temp_mean <- lets.addvar(PAM, temp)
expect_true(class(PAM_temp_mean) == "matrix")
expect_true(ncol(as.matrix(PAM_temp_mean)) == (ncol(PAM[[1]]) + 1))
})
test_that("lets.addvar works fine, different fun", {
skip_on_cran()
PAM_temp_mean <- lets.addvar(PAM, temp, fun = sd)
expect_true(class(PAM_temp_mean) == "matrix")
expect_true(ncol(as.matrix(PAM_temp_mean)) == (ncol(PAM[[1]]) + 1))
})
test_that("lets.addvar works fine, onlyvar = TRUE", {
skip_on_cran()
PAM_temp_mean <- lets.addvar(PAM, temp, onlyvar = TRUE)
expect_true(class(PAM_temp_mean) == "matrix")
expect_true(ncol(as.matrix(PAM_temp_mean)) == 1)
})
test_that("lets.addvar works fine, multiple rasters", {
skip_on_cran()
PAM_temp_mean <- lets.addvar(PAM, tempstack)
expect_true(class(PAM_temp_mean) == "matrix")
expect_true(ncol(as.matrix(PAM_temp_mean)) == (ncol(PAM[[1]]) + 2))
})
library(letsR)
?lets.distmat
update.packages(checkBuilt=TRUE, ask=FALSE)
install.packages("rgdal")
install.packages("fields")
library(letsR)
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
head(pamvar)
resu <- lets.classvar(x = pamvar, pos = ncol(pamvar), xy = TRUE)
resu
class(resu)
length(PAM[[3]])
nrow(resu)
library(testthat)
data(temp)
context("Test for lets.classvar")
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
test_that("lets.addpoly lets.classvar fine", {
skip_on_cran()
resu_test <- lets.classvar(x = pamvar, pos = ncol(pamvar), xy = TRUE)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
})
test_that("lets.addpoly lets.classvar fine, xy = FALSE", {
skip_on_cran()
resu_test <- lets.classvar(x = pamvar[, -(1:2)], pos = ncol(pamvar), xy = FALSE)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
})
test_that("lets.addpoly lets.classvar fine, set groups", {
skip_on_cran()
gr <- 15
resu_test <- lets.classvar(x = pamvar, pos = ncol(pamvar),
xy = TRUE, groups = gr)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
expect_true(ncol(resu_test) == gr)
})
gr <- 15
resu_test <- lets.classvar(x = pamvar, pos = ncol(pamvar),
xy = TRUE, groups = gr)
resu_test
head(resu_test)
library(letsR)
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
field <- lets.field(PAM, range, PAM$S, weigth = TRUE)
field
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
field
field <- lets.field(PAM, range, PAM$S, weigth = FALSE, count =TRUE)
field <- lets.field(PAM, range, PAM$S, weigth = FALSE, count =TRUE)
?lets.field
field <- lets.field(PAM[[1]], range, PAM$S, weigth = FALSE, count =TRUE)
paste("Please set if your matrix contains coordinates\r
in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates\r
in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates\r
\033[Fin the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates\r
\033[F in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
\033 in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
\033in the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
\033[Fin the first two columns (xy argument)")
cat("Please set if your matrix contains coordinates
\033[F in the first two columns (xy argument)")
cat(paste("Please set if your matrix contains coordinates
\033[F in the first two columns (xy argument)"))
cat(paste("Please set if your matrix contains coordinates
in the first two columns (xy argument)"))
cat(paste("Please set if your matrix contains coordinates in the first two columns (xy argument)"))
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(resu_test), "matrix")
expect_equal(class(field), "matrix")
expect_equal(class(field), "data.frame")
head(field)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, count = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
PAM[[1]]
PAM[[1]]
x <- PAM[[1]]
x[, -(1:2)]
x<- x[, -(1:2)]
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
field <- lets.field(PAM[[1]], range, PAM$S, xy = FALSE)
field <- lets.field(PAM[[1]], range, PAM$S)
is.matrix(x)
library(letsR)
library(testthat)
context("Test for lets.field")
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
test_that("lets.field works fine", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, weigth = FALSE", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, count = TRUE", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S, count = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, matrix and xy = TRUE", {
skip_on_cran()
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, count = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
x = PAM[[1]]
y = range
z = PAM[[3]]
x = PAM[[1]]
y = range
z = PAM[[3]]
weigth = TRUE
xy = TRUE
count = FALSE
class(x) == "PresenceAbsence"
if (class(x) == "PresenceAbsence") {
p <- x[[1]][, -(1:2)]
}
is.matrix(x)
if (is.matrix(x)) {
if (is.null(xy)) {
stop(paste("Please set if your matrix contains ",
"coordinates in the first two columns",
"(xy argument)."), sep = "")
}
if (xy) {
x <- x[, -(1:2)]
}
p <- x
}
p
head(p)
if (is.factor(y)) {
y <- as.numeric(levels(y))[y]
}
p2 <- p
p2
for(i in 1:ncol(p2)) {
pos <- z == x[[3]][i]
if (length(pos) > 0) {
p2[, i] <- p2[, i] * y[pos]
pos2 <- p2[, i] == 0
p2[pos2, i] <- NA
} else {
p2[, i] <- NA
}
}
i
head(p[, 1:5])
pos <- z == x[[3]][i]
pos
z
library(letsR)
library(testhat)
library(testthat)
context("Test for lets.field")
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
test_that("lets.field works fine", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, weigth = FALSE", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, count = TRUE", {
skip_on_cran()
field <- lets.field(PAM, range, PAM$S, count = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
test_that("lets.field works fine, matrix and xy = TRUE", {
skip_on_cran()
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
})
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
library(letsR)
library(testthat)
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
library(letsR)
library(testthat)
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
skip_on_cran()
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, count = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM[[1]], range, PAM$S, xy = TRUE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM[[1]][, -(1:2)], range, PAM$S, xy = FALSE)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
expect_error(lets.field(PAM[[1]], range, PAM$S))
lets.field(PAM[[1]], range, PAM$S
)
library(letsR)
library(testthat)
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
resu_test <- lets.classvar(x = pamvar, pos = ncol(pamvar), xy = TRUE)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
resu_test <- lets.classvar(x = pamvar[, -(1:2)], pos = ncol(pamvar), xy = FALSE)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
pamvar
pamvar[, -(1:2)]
resu_test <- lets.classvar(x = pamvar[, -(1:2)], pos = ncol(pamvar), xy = FALSE)
resu_test <- lets.classvar(x = pamvar[, -(1:2)], pos = (ncol(pamvar)-2),
xy = FALSE)
expect_equal(class(resu_test), "matrix")
expect_true(nrow(resu_test) == length(PAM[[3]]))
library(letsR)
library(letsR)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(PAM)
trait <- runif(32)
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
data(IUCN)
IUCN
trait <- IUCN$Description_Year
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster) ; map(add = T)
plot(resu$Raster, col = rev(heat.colors(100))) ; map(add = T)
plot(resu$Raster, col = rev(heat.colors(100)),
xlab = "Longitude", ylab = "Latitude",
main = "Mean description year per site") ; map(add = T)
data(PAM)
data(IUCN)
trait <- IUCN$Description_Year
resu <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
head(resu$Matrix)
plot(resu$Raster, col = rev(heat.colors(100)),
xlab = "Longitude", ylab = "Latitude",
main = "Mean description year per site") ; map(add = T)
plot(resu$Raster, col = rev(topo.colors(100)),
xlab = "Longitude", ylab = "Latitude",
main = "Mean description year per site") ; map(add = T)
plot(resu$Raster, xlab = "Longitude", ylab = "Latitude",
main = "Mean description year per site") ; map(add = T)
resu_test <- lets.maplizer(PAM, trait, PAM$S)
resu_test
head(resu_test)
head(resu_test)
#' resu <- lets.maplizer(PAM, cbind(trait, trait), PAM$S, ras = TRUE)
resu
resu <- lets.maplizer(PAM, cbind(trait, trait), PAM$S, ras = TRUE)
name(c(1, 2))
names(c(1, 2))
library(letsR)
resu_test <- lets.maplizer(PAM, trait, PAM$S)
data(PAM)
data(IUCN)
trait <- IUCN$Description_Year
resu_test <- lets.maplizer(PAM, trait, PAM$S)
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 3)
resu_test <- lets.maplizer(PAM, trait, PAM$S, func = sd)
head(resu_test)
library(letsR)
resu_test <- lets.maplizer(PAM, trait, PAM$S)
data(PAM)
data(IUCN)
trait <- IUCN$Description_Year
resu_test <- lets.maplizer(PAM, trait, PAM$S)
head(resu_test)
resu_test <- lets.maplizer(PAM, trait, PAM$S, func = sd)
head(resu_test)
resu_test <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
names(resu_test)
resu_test <- lets.maplizer(PAM, trait, PAM$S, ras = TRUE)
expect_equal(class(resu_test), "list")
expect_equal(class(resu_test[[1]]), "matrix")
expect_true(inherits(resu_test[[2]], "RasterLayer"))
expect_true(ncol(resu_test[[2]]) == 3)
expect_true(ncol(resu_test[[1]]) == 3)
?lets.maplizer
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
resu <- lets.summarizer(x = pamvar, pos = ncol(pamvar), xy = TRUE)
resu
head(resu)
head(pamvar)
colnames(pamvar[ncol(pamvar)])
colnames(pamvar[, ncol(pamvar)])
colnames(pamvar[, ncol(pamvar), drop = FALSE])
library(letsR)
?lets.summarizer
data(PAM)
data(temp)
pamvar <- lets.addvar(PAM, temp)
resu <- lets.summarizer(x = pamvar, pos = ncol(pamvar), xy = TRUE)
head(resu)
resu_test <- lets.summarizer(x = pamvar, pos = ncol(pamvar), xy = TRUE)
expect_equal(class(resu_test), "matrix")
expect_equal(class(resu_test), "data.frame")
expect_true(nrow(resu_test) == length(PAM[[3]]))
nrow(resu_test) == length(PAM[[3]])
resu_test <- lets.summarizer(x = pamvar, pos = ncol(pamvar),
xy = TRUE, fun = sd)
expect_equal(class(resu_test), "data.frame")
expect_true(nrow(resu_test) == length(PAM[[3]]))
expect_true(ncol(resu_test) == 3)
ncol(resu_test)
resu_test
resu_test <- lets.summarizer(x = pamvar[, -(1:2)],
pos = ncol(pamvar[, -(1:2)]),
xy = FALSE)
expect_equal(class(resu_test), "data.frame")
expect_true(nrow(resu_test) == length(PAM[[3]]))
expect_true(ncol(resu_test) == 3)
resu_test <- lets.summarizer(x = pamvar, pos = ncol(pamvar), xy = TRUE)
expect_equal(class(resu_test), "data.frame")
expect_true(nrow(resu_test) == length(PAM[[3]]))
expect_true(ncol(resu_test) == 3)
library(letsR)
