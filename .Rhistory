distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
library(letsR)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(cbind(IUCN$Description, IUCN$Description), distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(cbind(IUCN$Description, sample(IUCN$Description)), distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
range <- lets.rangesize(x = PAM, units = "cell")
field <- lets.field(PAM, range, PAM$S)
expect_equal(class(field), "data.frame")
expect_true(ncol(field) == 2)
expect_true(nrow(field) == length(PAM$S))
field <- lets.field(PAM, range, PAM$S, weigth = FALSE)
field <- lets.field(PAM, range, PAM$S, weight = FALSE)
data(PAM)
data(Phyllomedusa)
resu_test <- lets.rangesize(x = Phyllomedusa,
coordinates = "geographic")
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
expect_true(!any(is.na(resu_test)))
resu_test <- lets.rangesize(x = Phyllomedusa,
coordinates = "planar")
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
expect_true(!any(is.na(resu_test)))
resu_test <- lets.rangesize(x = PAM,
units = "squaremeter")
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
expect_true(!any(is.na(resu_test)))
resu_test <- lets.rangesize(x = PAM,
units = "cell")
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
expect_true(!any(is.na(resu_test)))
Phyllomedusa
projection(Phyllomedusa) <- projection(PAM)
Phyllomedusa
projection(Phyllomedusa) <- projection(PAM[[2]])
Phyllomedusa
resu_test <- lets.rangesize(x = Phyllomedusa,
coordinates = "geographic")
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
expect_true(!any(is.na(resu_test)))
resu_test
?letsR
?letsR-package
N <- 100
x <- rnorm(nrow(PAM[[1]]))[1:N]
y <- lets.distmat(PAM[[1]][1:N, 1:2])
z <- 10
library(letsR)
N <- 100
x <- rnorm(nrow(PAM[[1]]))[1:N]
y <- lets.distmat(PAM[[1]][1:N, 1:2])
z <- 10
correl <- lets.correl(x, y, z, equidistant, plot)
equidistant <- FALSE
correl <- lets.correl(x, y, z, equidistant, plot)
N <- 100
x <- rnorm(nrow(PAM[[1]]))[1:N]
y <- lets.distmat(PAM[[1]][1:N, 1:2])
z <- 10
equidistant <- FALSE
plot <- FALSE
correl <- lets.correl(x, y, z, equidistant, plot)
correl
expect_true(class(correl) == "matrix")
expect_true(all(!is.na(correl)))
correl <- lets.correl(x, y, z, plot = TRUE)
?letsR
library(letsR)
?letsR
gsub("^$", "", " oi ")
gsub("$", "", " oi ")
gsub("\<", "", " oi ")
gsub("[\<]", "", " oi ")
gsub("\b", "", " oi ")
gsub("[\b]", "", " oi ")
gsub("[$]", "", " oi ")
gsub(".[$].", "", " oi ")
gsub(".[^$].", "", " oi ")
gsub("[^$]", "", " oi ")
gsub("[$^]", "", " oi ")
gsub("\w", "", " oi ")
gsub("[\w]", "", " oi ")
gsub(" ", "", " oi ")
gsub("+o ", "", " o i ")
gsub("{1}o ", "", " o o i ")
gsub("{2}o ", "", " o o i ")
gsub("[{1}o]", "", " o o i ")
gsub("{1}[o]", "", " o o i ")
gsub("{1,}[o]", "", " o o i ")
cat("BRUNO OI")
cat("\nBRUNO OI")
cat("\tBRUNO OI")
cat("\bBRUNO OI")
cat("\aBRUNO OI")
cat("\aBRUNO \aOI")
cat("\aBRUNO\aOI")
cat("\aBRUNO \eOI")
cat("\aBRUNO \fOI")
cat("\fOI")
cat("\fOI Bruno")
cat("\rOI Bruno")
cat("\rOI Bruno")
cat("\rOI Bruno\r oi")
cat("Bruno\r oi")
cat("Bruno \r oi")
cat(" \r oi Bruno")
devtools::load_all(".")
library(XML)
input <- "Pongo pygmaeus"
input <- gsub(as.matrix(input), pattern = " ",
replacement = "-")
h <- try(htmlParse(paste("http://api.iucnredlist.org/go/",
input, sep = "")),
silent = TRUE)
class(h)[1] != "try-error"
h
b <- try(xpathSApply(h, '//div', xmlValue), silent = TRUE)[1]
b
c <- as.numeric(gsub("\\D", "", b))
c
http <- "http://www.iucnredlist.org/details/summary/"
h1 <- try(htmlParse(paste(http, c, "/0", sep = "")),
silent = TRUE)
h1
links <- xpathSApply(h1, "//a/@href")
links
links <- strsplit(links, "\n")
links
parents <- xpathSApply(h1, "//a")
parents
lets.iucn("Pongo pygmaeus")
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
lets.iucn(sp)
testiucn <- lets.iucn(sp)
testiucn2 <- lets.iucn(sp, count = TRUE)
library(testthat)
testiucn <- lets.iucn("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
library(letsR)
?lets.iucn
library(letsR)
?letsR
library(letsR)
?letsR
library(letsR)
library(letsR)
?letsR
library(letsR)
?letsR
library(letsR)
?letsR
input <- "bruno vilela"
length(strsplit(input, "-"))
length(strsplit(input, " "))
strsplit(input, " ")
input <- "bruno-vilela"
length(unlist(strsplit(input, "-")))
library(letsR)
?lets.iucn.his
library(letsR)
?lets.iucn.his
library(letsR)
lets.iucn.his("Panthera onca")
sp <- c("Rhincodon typus", "Ailuropoda melanoleuca")
lets.iucn.his(sp)
sp <- c("Rhincodon typus", "Ailuropoda melanoleuca")
lets.iucn.his(sp, count = TRUE)
library(testthat)
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
testiucn <- lets.iucn.his("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
testiucn <- lets.iucn.his(sp)
input <-  c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
count = FALSE
if (class(input) == "PresenceAbsence") {
input <- input$S
}
input <- gsub(input, pattern = "_", replacement = " ")
n <- length(input)
# Automate date
data <- date()
anofinal <- substr(data, (nchar(data) - 3), nchar(data))
anos <- 1980:anofinal
#Empty matrix
resus <- matrix(ncol = length(anos), nrow = n)
colnames(resus) <- anos
# With count window
i=1
.Hist(input[i], anos)
devtools::load_all(".")
.Hist(input[i], anos)
i=2
.Hist(input[i], anos)
i=3
.Hist(input[i], anos)
matriz <- matrix("NE", ncol = length(anos))
colnames(matriz) <- anos
c <- .getcode(input)
c
input <- gsub(as.matrix(input), pattern = " ",
replacement = "-")
input
input <- input[i]
c <- .getcode(input)
c
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
library(XML)
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
ano1 <- try(xpathSApply(h2, '//div[@id="modified_year"]', xmlValue),
silent = TRUE)
ano1
ameaca1 <- try(xpathSApply(h2, '//div[@id="red_list_category_code"]',
xmlValue),
silent = TRUE)
ameaca1
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
ano1
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a <- a[2]
a <- gsub("\n", "", a)
a <- gsub("\t", "", a)
b <- strsplit(a, "          ")[[1]]
b <- strsplit(b, "      ")
c <- do.call("rbind", b)
c <- matrix(c, ncol = 1)
dupc <- duplicated(c)
if (any(dupc)) {
c <- c[!dupc, , drop = FALSE]
}
ano <- substr(gsub("\\D", "", c), 1, 4)
ano
a
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")
c <- .getcode(input)
c
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
h
a
a
library(letsR)
input <-  c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
lets.iucn.his(input)
lets.iucn.his(input, count = TRUE)
input <- "Cebus flavius"
count = FALSE
if (class(input) == "PresenceAbsence") {
input <- input$S
}
input <- gsub(input, pattern = "_", replacement = " ")
n <- length(input)
# Automate date
data <- date()
anofinal <- substr(data, (nchar(data) - 3), nchar(data))
anos <- 1980:anofinal
#Empty matrix
resus <- matrix(ncol = length(anos), nrow = n)
colnames(resus) <- anos
i=1
.Hist(input[i], anos)
devtools::load_all(".")
library(XML)
.Hist(input[i], anos)
matriz <- matrix("NE", ncol = length(anos))
colnames(matriz) <- anos
c <- .getcode(input)
c
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
ano1 <- try(xpathSApply(h2, '//div[@id="modified_year"]', xmlValue),
silent = TRUE)
ameaca1 <- try(xpathSApply(h2, '//div[@id="red_list_category_code"]',
xmlValue),
silent = TRUE)
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a <- a[2]
a
a
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
c =1010101010
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
c <- .getcode(input)
is.null(c)
h2 <- htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = ""))
ano1 <- xpathSApply(h2, '//div[@id="modified_year"]', xmlValue)
ameaca1 <- xpathSApply(h2, '//div[@id="red_list_category_code"]', xmlValue)
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
library(letsR)
input <- "Cebus flavius"
lets.iucn.his(input, count = TRUE)
library(letsR)
lets.iucn.his(input, count = TRUE)
input <- "Cebus flavius"
lets.iucn.his(input, count = TRUE)
lets.iucn.his("Bruno Vilela", count = TRUE)
lets.iucn.his("Bruno", count = TRUE)
library(testhat)
library(testthat)
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
testiucn <- lets.iucn.his("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
?lets.presab
library(maptools)
library(testhat)
library(testthat)
xy <- cbind(1:10, 1:10)
species <- rep(c('Milvus milvus', 'Buteo buteo'), each = 5)
PresAbMat <- lets.presab.points(xy, species)
expect_equal(class(PresAbMat), "PresenceAbsence")
expect_equal(dim(PresAbMat[[1]]), c(10, 4))
expect_equal(sum(PresAbMat[[1]][,3]), 5)
expect_equal(sum(PresAbMat[[1]][,4]), 5)
expect_true(inherits(PresAbMat[[2]], "RasterLayer"))
# Species list as factor not character
species <- factor(rep(c('Milvus milvus', 'Buteo buteo'), each = 5))
PresAbMat <- lets.presab.points(xy, species)
expect_equal(class(PresAbMat), "PresenceAbsence")
# Check other projections
crsdfi <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
expect_equal(class(PresAbMat), "PresenceAbsence")
crsdfi <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
crsdfi
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
crsdif <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
PresAbMat
expect_equal(class(PresAbMat), "PresenceAbsence")
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
?PresenceAbsence
library(letsR)
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
data(PAM)
names(PAM)
#' - (\code{\link{lets.addpoly}}\cr
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(devtools)
use_travis
?use_travis
use_travis("letsR")
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?sudo
??sudo
library(letsR)
library(letsR)
