#' @param presence A vector with the code numbers of presence type to be matained.
#' @param origin A vector with the code numbers of origin type to be matained.
#' @param seasonal A vector with the code numbers of seasonal type to be matained.
#'
#' @return The result is the shapefile filtered. If the filters remove all polygons, the result will be NULL.
#'
#'
#' @details Presence codes:
#' (1) Extant,
#' (2) Probably Extant,
#' (3) Possibly Extant,
#' (4) Possibly Extinct,
#' (5) Extinct (post 1500) &
#' (6) Presence Uncertain.
#'
#' Origin codes:
#' (1) Native,
#' (2) Reintroduced,
#' (3) Introduced,
#' (4) Vagrant &
#' (5) Origin Uncertain.
#'
#' Seasonal codes:
#' (1) Resident,
#' (2) Breeding Season,
#' (3) Non-breeding Season,
#' (4) Passage &
#' (5) Seasonal Occurrence Uncertain.
#'
#' More info see metadata file of the shapefiles.
#'
#' @seealso plot.PresenceAbsence
#' @seealso presab
#'
#' @export
shFilter <- function(shapes, presence=NULL, origin=NULL, seasonal=NULL){
if(is.null(presence) & is.null(origin) & is.null(seasonal)){
return(shapes)
}else{
try(names(shapes)[names(shapes)=="ORIGIN"]  <- "origin", silent = T)
try(names(shapes)[names(shapes)=="PRESENCE"]  <- "presence", silent = T)
try(names(shapes)[names(shapes)=="SEASONAL"]  <- "seasonal", silent = T)
if(!is.null(presence)){
pos <- which(shapes$presence %in% presence)
if(length(pos)>0){
shapes <- shapes[pos, ]
}else{
shapes <-  NULL
}
}
if(!is.null(origin)){
pos2 <- which(shapes$origin %in% origin)
if(length(pos2)>0){
shapes <- shapes[pos2, ]
}else{
shapes <- NULL
}
}
if(!is.null(seasonal)){
pos3 <- which(shapes$seasonal %in% seasonal)
if(length(pos3)>0){
shapes <- shapes[pos3, ]
}else{
shapes <- NULL
}
}
return(shapes)
}
}
# Summary for object of class PresenceAbsence
# Bruno Vilela
#' @export
summary.PresenceAbsence <- function(x){
class <- class(x)
Numberofspecies <- ncol(x$Pre)-2
Numberofcells <- nrow(x$Pre)
x2<- x$Pre[,-(1:2)]
if(is.vector(x2)){
nomes <- names(x2)
x2 <- matrix(x2, ncol=length(x2))
colnames(x2) <- nomes
}
if(Numberofspecies>1){
Cellswithpresence <- sum(rowSums(x2)>0)
Cellswithoutanypresence <- sum(rowSums(x2)==0)
Specieswithoutanypresence <- sum(colSums(x2)==0)
SpeciesLargestRange <- names(2+which(colSums(x2)==max(colSums(x2))))
}
if(Numberofspecies==1){
Cellswithpresence <- sum(x2>0)
Cellswithoutanypresence <- sum(x2==0)
Specieswithoutanypresence <- ifelse(Numberofcells==Cellswithoutanypresence, 1, 0)
SpeciesLargestRange <- x$S
}
resolution <- res(x$Ri)
extention <- extent(x$Ri)
coordRef <- projection(x$R)
result <- list(class=class,Numberofspecies=Numberofspecies, Numberofcells=Numberofcells,
Cellswithpresence=Cellswithpresence, Cellswithoutanypresence=Cellswithoutanypresence,
Specieswithoutanypresence=Specieswithoutanypresence, SpeciesLargestRange=SpeciesLargestRange,
resolution=resolution, extention=extention, coordRef=coordRef)
class(result) <- "summary.PresenceAbsence"
return(result)
}
#Print for object of class PresenceAbsence
#Bruno Vilela
#' @export
print.PresenceAbsence <- function(x){
resolution <- res(x$Ric)
cat("\nClass:", class(x),
"\nNumber of species:", (ncol(x$Pre)-2),
"\nNumber of cells:", nrow(x$Pre))
cat("\nScale: ", resolution[1], ", ", resolution[2], " (x, y)", sep="")
}
#' Download species information from IUCN
#'
#' @author Bruno Vilela
#'
#' @description return sepecies information from IUCN website from one or more species names,
#' or from an object of the PresenceAbsence class.
#'
#' @usage lets.iucn(input)
#'
#' @param input character vector with one or more species names,
#' or an object of the PresenceAbsence class.
#'
#' @return Return a data frame with the species name, Family, Status,
#' Criteria used to estabilish that status (when the species is threatened),
#' population status, the year of description and the countries where it occurs.
#' NE = Not evaluated
#'
#' @details Depending on your internet conection and the number of species, the function
#' may take some time. So, we open a count window where you can follow the progress.
#' Note that the internet must be turned on during all the process.
#'
#' @import XML
#'
#' @seealso lets.iucn.ha
#'
#' @export
lets.iucn <- function(input){
if(class(input)=="PresenceAbsence"){
input <- input$S
}
input <- gsub(as.matrix(input), patt=" ", replace="-")
#vetor para guardar o status
ln <- length(input)
matriz1 <- matrix(nrow=ln)
status <-  matriz1
criterio <- matriz1
populacao <- matriz1
familia <- matriz1
autor <- matriz1
pais <- matriz1
cat("This action may take some time...\nWe will take the liberty to open a counting window so you can follow the progress...")
x11(2, 2, pointsize=12)
par(mar=c(0, 0, 0, 0))
#Loop para procurar o status de cada especie da matriz no site da IUCN
for (i in 1:ln){
plot.new()
text(0.5, 0.5, paste(paste("Total:", ln, "\n", "Runs to go: ", (ln-i))))
h <- try(htmlParse(paste("http://api.iucnredlist.org/go/",input[i], sep = "")),silent=TRUE)
if((class(h)[1])=="try-error"){
status[i, 1]<-"NE"
criterio[i, 1] <-""
populacao[i, 1]<-"Unkown"
familia[i, 1]<-""
autor[i, 1]<-""
pais[i, ]<-""
}else{
status[i, 1] <- try(xpathSApply(h, '//div[@id="red_list_category_code"]', xmlValue), silent=TRUE)
criterio[i, 1] <- try(xpathSApply(h, '//div[@id="red_list_criteria"]', xmlValue), silent=TRUE)
pop <- try(xpathSApply(h, '//div[@id="population_trend"]', xmlValue), silent=TRUE)
populacao[i, 1] <- ifelse(is.list(pop), "Unknown",pop)
familia[i, 1] <- try(xpathSApply(h, '//div[@id="family"]', xmlValue), silent=TRUE)
autor[i, 1] <- try(xpathSApply(h, '//div[@id="species_authority"]', xmlValue), silent=TRUE)
###Pais
distr1 <- try(xpathSApply(h, '//ul[@class="countries"]', xmlValue), silent=TRUE)
if(is.list(distr1)){
pais[i, 1] <- ""
}else{
distr2 <- try(unlist(strsplit(distr1, "\n")), silent=TRUE)
distr2[distr2 == "Russian Federation"] <- "Russia"
distr2[distr2 == "Bolivia, Plurinational States of"] <- "Bolivia"
distr2[distr2 == "Venezuela, Bolivarian Republic of"] <- "Venezuela"
distr2[distr2 == "Korea, Democratic People's Republic of"] <- "North Korea"
distr2[distr2 == "Congo, The Democratic Republic of the"] <- "Congo"
distr2[distr2 == "Tanzania, United Republic of"] <- "Tanzania"
distr2[distr2 == "Palestinian Territory, Occupied"] <- "Occupied Palestinian Territory"
distr2[distr2 == "Micronesia, Federated States of"] <- "Micronesia"
distr2[distr2 == "Macedonia, the former Yugoslav Republic of"] <- "Macedonia"
distr2[distr2 == "Korea, Republic of"] <- "South Korea"
distr2[distr2 == "Iran, Islamic Republic of"] <- "Iran"
distr2[distr2 == "Disputed Territory, Djibouti"] <- "Djibouti Disputed Territory"
distr2[distr2 == "Virgin Islands, U.S."] <- "Virgin Islands(U.S.)"
distr2[distr2 == "Virgin Islands, British"] <- "Virgin Islands(British)"
pais[i, 1] <- paste(distr2, collapse = ", ")
}
}
}
#Fazendo a tabela final
resu <- cbind(input, familia, status, criterio, populacao, autor, pais)
colnames(resu) <- c("Species", "Family", "Status", "Criteria", "Population", "Description_Year", "Country")
#Trocando a messagem de erro das especies que nao foram encontradas pelo status NE(not evaluated)
for (i in 1:nrow(resu)){
if(nchar(resu[i,2])>15){
resu[i, 2] <- ""
}
if(nchar(resu[i,3])>2){
resu[i, 3] <- "NE"
}
if(nchar(resu[i,4])>20){
resu[i, 4] <- ""
}
if(nchar(resu[i,5])>15){
resu[i, 5] <- "Unknown"
}
}
dev.off()
cat("\nThank you for your patience!")
#Retirando os tracos e colocando de novo o espaco entre as palavras
resu[, 1] <- gsub(resu[, 1],patt="-",replace=" ")
resu[, 6] <- as.numeric(gsub("\\D", "", resu[, 6]))
resu[, 6] <- as.numeric(substr(resu[, 6], 1, 4))
#retorna um data frame (so para retirar as aspas que ficam se estiver no formato de matriz)
return(as.data.frame(resu))
}
#' Download habitat information from IUCN
#'
#' @author Bruno Vilela
#'
#' @description return sepecies habitat information from IUCN website from one or more
#' species names, or from an object of the PresenceAbsence class.
#'
#' @usage lets.iucn.ha(input)
#'
#' @param input character vector with one or more species names,
#' or an object of the PresenceAbsence class.
#'
#' @return A data frame with the species names in the rows and the habitats in the columns,
#' the number 1 indicates the use of the habitat while the 0 indicates that the species do
#' not use the habitat.
#'
#' @details Depending on your internet conection and the number of species, the function
#' may take some time. So, we open a count window where you can follow the progress.
#' Note that the internet must be turned on during all the process.
#'
#' @import XML
#'
#' @seealso lets.iucn
#'
#'
#' @export
lets.iucn.ha <- function(input){
#keep species name
if(class(input)=="PresenceAbsence"){
input <- input$S
}
sps <- input
#enpty matrix
habitat <- matrix(0, nrow=length(input), ncol=19)
#Habitat names (and the name "species" that will be used in the matrix columns names)
names <- c("Species", "Forest", "Savanna", "Shrubland", "Grassland",
"Wetlands", "Rocky areas", "Caves and Subterranean Habitats",
"Desert", "Marine Neritic", "Marine Oceanic", "Marine Deep Ocean Floor",
"Marine Intertidal", "Marine Coastal/Supratidal", "Artificial/Terrestrial",
"Artificial/Aquatic", "Introduced Vegetation", "Other", "Unknown")
#Adding the column names
colnames(habitat) <- names
n <- length(input)
cat("This action may take some time...\nWe will take the liberty to open a counting window so you can follow the progress...")
x11(2, 2, pointsize=12)
par(mar=c(0, 0, 0, 0))
for(i in 1:n){
plot.new()
text(0.5, 0.5, paste(paste("Total:", n, "\n", "Runs to go: ", (n-i))))
#Taking the Website code from the internet
input <- gsub(as.matrix(input), patt=" ", replace="-")
h <- try(htmlParse(paste("http://api.iucnredlist.org/go/", input[i], sep = "")), silent=TRUE)
b <- try(xpathSApply(h, '//div', xmlValue), silent=TRUE)[1]
c <- as.numeric(gsub("\\D", "", b))
h2 <- try(htmlParse(paste("http://www.iucnredlist.org/details/classify/", c, "/0", sep = "")), silent=TRUE)
#taking the specific parts that contains the habitat names
b2 <- try(xpathSApply(h2, '//html', xmlValue), silent=TRUE)
#look for the habitat names inside the string (if the sting contains the name, it will be marked 1)
for(t in 2:18){
if(sum(grep(names[t], b2))>0){
habitat[i, t] <- 1
}
}
#If none of the habitat names have been found or also if the species have not been found in IUCN archives.
#it will be marked 1 in the column Unknwon
if(sum(habitat[i, ])==0){
habitat[i, 19] <- 1
}
}
dev.off()
cat("\nThank you for your patience!")
#Adding species names to the first column
habitat[, 1] <- sps
#Return the matrix
return(as.data.frame(habitat))
}
#' @export
print.summary.PresenceAbsence <- function(x){
cat("\nClass:", x$class)
cat("\n_ _")
cat("\nNumber of species:", x$Numberofspecies,
"\nNumber of cells:", x$Numberofcells)
cat("\nCells with presence:", x$Cellswithpresence)
cat("\nCells without presence:", x$Cellswithoutanypresence)
cat("\nSpecies without presence:", x$Specieswithoutanypresence)
cat("\nSpecies with the largest range:", x$SpeciesLargestRange)
cat("\n_ _")
cat("\nRaster carachteristics")
cat("\nScale: ", x$resolution[1], ", ", x$resolution[2], " (x, y)", sep="")
cat("\nExtention: ", xmin(x$ex), ", ",  xmax(x$ex), ", ", ymin(x$ex), ", ", ymax(x$ex), " (xmin, xmax, ymin, ymax)", sep="")
cat("\nCoord. Ref.: ", x$coordRef)
}
#' Download habitat information from IUCN
#'
#' @author Bruno Vilela
#'
#' @description return sepecies historic status information from IUCN website from one or more
#' species names, or from an object of the PresenceAbsence class.
#'
#' @usage lets.iucn.his(input)
#'
#' @param input character vector with one or more species names,
#' or an object of the PresenceAbsence class.
#'
#' @return A data frame with the species names in the rows and the years (1980 - 2014) in the columns,
#' the code represents the conservation status of the species (see IUCN website for details).
#' NE = Not evaluated.
#'
#' @details Depending on your internet conection and the number of species, the function
#' may take some time. So, we open a count window where you can follow the progress.
#' Note that the internet must be turned on during all the process.
#'
#' @import XML
#'
#' @seealso lets.iucn
#' @seealso lets.iucn.ha
#'
#'
#' @export
lets.iucn.his <- function(input){
if(class(input)=="PresenceAbsence"){
input <- input$S
}
resus <- c()
n <- length(input)
cat("This action may take some time...\nWe will take the liberty to open a counting window so you can follow the progress...")
x11(2, 2, pointsize=12)
par(mar=c(0, 0, 0, 0))
for(i in 1:n){
plot.new()
text(0.5, 0.5, paste(paste("Total:", n, "\n", "Runs to go: ", (n-i))))
resu <- Hist(input[i])
resus <- rbind(resus, resu)
}
dev.off()
cat("\nThank you for your patience!")
return(as.data.frame(resus))
}
###
Hist <- function(input){
input <- gsub(as.matrix(input), patt=" ", replace="-")
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/go/",input, sep = "")),silent=TRUE)
b <- try(xpathSApply(h2, '//div', xmlValue),silent=TRUE)[1]
c <- as.numeric(gsub("\\D", "", b))
ano1 <- try(xpathSApply(h2, '//div[@id="modified_year"]', xmlValue), silent=TRUE)
ameaca1 <- try(xpathSApply(h2, '//div[@id="red_list_category_code"]', xmlValue), silent=T)
anos <- 1980:2014
matriz <- matrix(ncol=length(anos))
colnames(matriz) <- anos
matriz[, ] <- "NE"
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/", c, "/0", sep = "")), silent=TRUE)
a <- try(xpathSApply(h, '//td[table]', xmlValue),silent=T)
a <- a[2]
a <- gsub("\n", "", a)
a <- gsub("\t", "", a)
b <- strsplit(a, "          ")[[1]]
b <- strsplit(b, "      ")
c <- do.call("rbind", b)
c <- matrix(c, ncol=1)
c <- c[-which(duplicated(c)), ]
ano <- substr(gsub("\\D", "", c), 1, 4)
if(length(ano)>=1){
d <- gsub("[0-9]", "", c)
d <- gsub("[[:punct:]]", "", d)
d2 <- gsub("\\W", "", d)
EX <- grep("Extinct", d2)
EW <- grep("ExtinctintheWild", d2)
VU <- grep("Vulnerable", d2)
EN <- grep("Endangered", d2)
CR <- grep("CriticallyEndangered", d2)
LC <- grep("LeastConcern", d2)
NT <- grep("NearThreatened", d2)
DD <- grep("DataDeficient", d2)
CT <- grep("CommerciallyThreatened", d2)
IN <- grep("Indeterminate", d2)
IK <- grep("InsufficientlyKnown", d2)
LR <- grep("LowerRisk", d2)
RA <- grep("Rare", d2)
ameaca <- numeric(length(ano))
ameaca[EX] <- "EX"
ameaca[EW] <- "EW"
ameaca[VU] <- "VU"
ameaca[EN] <- "EN"
ameaca[CR] <- "CR"
ameaca[LC] <- "LC"
ameaca[NT] <- "NT"
ameaca[IK] <- "IK"
ameaca[DD] <- "DD"
ameaca[IN] <- "IN"
ameaca[RA] <- "RA"
ameaca[CT] <- "CT"
ameaca[LR] <- "LR"
ameaca <- ameaca[which(!(duplicated(ano)))]
ano <- ano[which(!(duplicated(ano)))]
for(i in 1:length(ano)){
matriz[anos%in%ano[i]] <- ameaca[i]
}
ameaca <- c(ameaca, ameaca1)
ano <- c(ano, ano1)
ameaca <- ameaca[which(!(duplicated(ano)))]
ano <- ano[which(!(duplicated(ano)))]
pos <- which(anos%in%ano)
pos2 <- sort(ano, index.return=T)$ix
ameaca <- ameaca[pos2]
for(i in 1:(length(ameaca)-1)){
matriz[seq(from=(pos[i]+1),(pos[i+1]-1))] <- ameaca[i]
}
}
if(ano1%in%anos){
pos3 <- which(anos%in%ano1)
matriz[pos3:ncol(matriz)] <- ameaca1
}
Species <- gsub(as.matrix(input), patt="-", replace=" ")
matriz <- cbind(Species, matriz)
colnames(matriz)[1] <- "Species"
return(matriz)
}
#' Add variables to a PresenceAbscence object
#'
#' @author Bruno Vilela
#'
#' @description Add variables in raster format to a PresenceAbsence object.
#'
#' @usage lets.addvar(x, y)
#'
#' @param x An PresenceAbsence object.
#' @param y Variables to be added in Raster or RasterStack format.
#'
#' @return The result is a matrix of species presence/absence with
#' the variables columns added at the end.
#'
#' @seealso presab.birds
#' @seealso presab
#'
#' @export
lets.addvar <- function(x, y){
var_c <- crop(y, x$R)
res1 <- res(var_c)[1]
res2 <- res(x$R)[1]
if(res2>res1){
var_a <- aggregate(var_c, fact= (res2/res1), na.rm=T)
}
if(res2<res1){
var_a <- disaggregate(var_c, fact= (res1/res2), na.rm=T)
}
if(res2==res1){
var_a <- var_c
}
var_r <- resample(var_a, x$R)
var_e <- extract(var_r, x$P[, 1:2])
resultado <- cbind(x$P, var_e)
return(resultado)
}
library(letsR)
resu1 <- presab.birds("C:/Users/Bruno/Documents/testeb", resol=40, origin=c(1, 2), seasonal=c(1, 2), presence=c(1, 2, 3), remove.cell=T, remove.sp=T)
#Packages
library(raster)
library(maptools)
library(maps)
library(XML)
resu1 <- presab.birds("C:/Users/Bruno/Documents/testeb", resol=40, origin=c(1, 2), seasonal=c(1, 2), presence=c(1, 2, 3), remove.cell=T, remove.sp=T)
resu1
summary(resu1)
library(devtools)
install_git("BrunoVilela", "letsR")
install_git("https://github.com/BrunoVilela/letsR")
??load_all
devtools::load_all(".")
#Packages
library(raster)
library(maptools)
library(maps)
library(XML)
serpe <- readShapePoly("C:/Users/Bruno/SkyDrive/Pacote/SEASNAKES/VIEW_SEASNAKES.shp")
lista <- list.files("C:/Users/Bruno/Documents/bio_10m_bil", pattern=".bil", full.names=T)
vari <- stack(lista)
resu <- lets.presab(serpe, resol=2, remove.cell=T, origin=1)
resu
summary(resu)
devtools::load_all(".")
library(letsR)
?lets.iucn
library(letsR)
help(lets.presav)
help(lets.presab)
