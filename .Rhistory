#'and may take some time to process it. Thus, during the process, if \code{count} argument is set \code{TRUE}, a counting window will open so you can see the progress (i.e. in what polygon the function is working). Note that the number of
#'polygons is not the same as the number of species that you have (i.e. a species may have more than one polygon/shapefiles).
#'
#' @seealso \code{\link{plot.PresenceAbsence}}
#' @seealso \code{\link{lets.presab.birds}}
#' @seealso \code{\link{lets.shFilter}}
#'
#' @examples \dontrun{
#' data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
#' PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
#' summary(PAM)
#' plot(PAM)  # Species richness map
#' plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
#' }
#'
#'
#' @import raster
#' @import maptools
#' @import maps
#' @import sp
#'
#'
#' @export
lets.presab <- function(shapes, xmn=-180, xmx=180, ymn=-90,
ymx=90, resol=1, remove.cells=TRUE,
remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"),
cover=0, presence=NULL, origin=NULL,
seasonal=NULL, count=FALSE){
if(!all(is.null(presence), is.null(origin), is.null(seasonal))){
shapes <- lets.shFilter(shapes, presence=presence, origin=origin, seasonal=seasonal)
}
if(is.null(shapes)){
stop("after filtering none species distribution left")
}
ras <- raster(xmn=xmn, xmx=xmx, ymn=ymn, ymx=ymx, crs=crs)
res(ras) <- resol
values(ras) <- 1
coord <- xyFromCell(ras, 1:length(values(ras)))
colnames(coord) <- c("Longitude(x)", "Latitude(y)")
if(any(names(shapes)=="BINOMIAL")){
nomes <- levels(shapes$BINOMIAL)
n <- length(shapes$BINOMIAL)
nomes2 <- shapes$BINOMIAL
}
if(any(names(shapes)=="binomial")){
nomes <- levels(shapes$binomial)
n <- length(shapes$binomial)
nomes2 <- shapes$binomial
}
matriz <- matrix(0, ncol=length(nomes), nrow=length(values(ras)))
colnames(matriz) <- nomes
if(count == TRUE){
dev.new(2, 2, pointsize = 12)
par(mar=c(0, 0, 0, 0))
for(i in 1:n){
plot.new()
text(0.5, 0.5, paste(paste("Total:", n, "\n","Runs to go: ", (n-i))))
celulas <- extract(ras, SpatialPolygons(list(shapes@polygons[[i]])), cellnumbers=T, weights=T, small=T)
pos <- which(nomes2[i]==nomes)
pos2 <- do.call(rbind.data.frame, celulas)
pos2 <- pos2[which(pos2[,3]>=cover), ]
matriz[pos2[, 1], pos] <- 1
}
dev.off()
}
if(count == FALSE){
for(i in 1:n){
celulas <- extract(ras, SpatialPolygons(list(shapes@polygons[[i]])), cellnumbers=T, weights=T, small=T)
pos <- which(nomes2[i]==nomes)
pos2 <- do.call(rbind.data.frame, celulas)
pos2 <- pos2[which(pos2[,3]>=cover), ]
matriz[pos2[, 1], pos] <- 1
}
}
cbind(coord,matriz)->Resultado
if(remove.cells==TRUE){
Resultado <- .removeCells(Resultado)
}
if(remove.sp==TRUE){
Resultado <- .removeSp(Resultado)
}
if(show.matrix==TRUE){
return(Resultado)
}else{
values(ras) <- rowSums(matriz)
final <- list("Presence and Absence Matrix"=Resultado, "Richness Raster"=ras,
"Species name"=colnames(Resultado)[-(1:2)])
class(final) <- "PresenceAbsence"
return(final)
}
}
datadata(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=TRUE)
summary(PAM)
data(Phyllomedusa)
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(sp)
library(devtools)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=T)
library(letsR)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=T)
library(letsR)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=T)
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(sp)
library(letsR)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=T)
plot(PAM)
plot(PAM, world=F)
?par
arg(dev.new)
arguments(dev.new)
args(dev.new)
dev.new
?dev
?x11
dev.new(width=2, height=2, pointsize = 12)
library(letsR)
options(device = "windows")
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=T)
plot(1:10, 1:10)
dev.new(width=2, height=2, pointsize = 12)
plot(1:10, 1:10)
library(letsR)
length("# Check where is the variable name (in this case it is in "NAME" which will be my z value)")
length("Check where is the variable name (in this case it is in "NAME" which will be my z value)")
status <- sample(c("EN","VU", "NT", "CR", "DD", "LC"), 30, replace=TRUE)
TE <- "Threatened"
NT <- "Non-Threatened"
new <- c(TE, TE, NT, TE, "Data Deficient", NT)
old <- c("EN","VU", "NT", "CR", "DD", "LC")
statustrans <- lets.transf(status, old, new, NUMERIC=FALSE)
statustrans
status
library(letsR)
lets.iucn(c("Musonycteris harrisoni", "Ailuropoda melanoleuca", "Cebus flavius"), count=TRUE)
lets.iucn(c("Musonycteris harrisoni", "Ailuropoda melanoleuca", "Cebus flavius"), count=TRUE)
install.packages("letsR")
install.packages("letsR")
library(letsR)
library(letsR)
library(letsR)
library(letsR)
install.packages("letsR")
?letsR
library(letsR)
?letsR
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)  # Species richness map
library(maps)
plot(PAM)  # Species richness map
?lets.iucn
lets.iucn("Pongo pygmaeus")
lets.iucn(c("Musonycteris harrisoni", "Ailuropoda melanoleuca", "Cebus flavius"))
?lets.midpoint
mid <- lets.midpoint(PAM)
mid
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, count=TRUE)
plot(PAM)
library(letsR)
?description
library(letsR)
library(letsR)
dados <- read.table("clipboard", header=T, sep="\t")
head(dados)
line(g2[1], g2[2])
g2 <- dados[, 3]
line(g2[1], g2[2])
?line
g2 <- dados[, 1:3]
line(g2[1, ], g2[2, ])
linha <- line(g2[1, ], g2[2, ])
names(linhas)
names(linha)
linha$coeff
plot(linha)
abline(g2[1, ], g2[2, ])
plot(g2)
plot(x=g2[,1], y=g2[,2])
dados
plot(x=g2[,1], y=g2[,3])
g2 <- dados[, c(1,3)]
linha <- line(g2[1, ], g2[2, ])
linha$coeff
dados <- read.table("clipboard", header=T, sep="\t")
dados <- read.table("clipboard", header=T, sep="\t")
g2 <- dados[, c(1,3)]
linha <- line(g2[1,], g2[2, ])
linha$coeff
linha
g2[1,]
g2[2, ]
linha <- line(g2[1,], g2[2, ])
linha
linha <- line(g2[1,]+0.0001, g2[2, ])
linha$coeff
linha <- line(g2[1,]+0.1, g2[2, ])
linha$coeff
linha <- line(g2[1,], g2[2, ])
abline(g2[1,], g2[2, ])
?abline
abline(h=rbind(g2[1,], g2[2, ]))
rbind(g2[1,], g2[2, ])
abline(rbind(g2[1,], g2[2, ]))
abline(linha)
linha <- line(g2[2,], g2[3, ])
linha$coeff
linha <- line(g2[2,], g2[5, ])
linha$coeff
g2[2,]
g2[5, ]
?line
linha <- line(rbind(g2[2,], g2[5, ]))
linha$coeff
linha
linha <- line(g2[1:2,])
linha$coeff
plot(cars)
(z <- line(cars))
cars
g2[1:2,]
linha <- line(g2[1:2,])
linha
class(cars)
classs(g2)
class(g2)
linha <- line(g2)
linha$coeff
linha <- line(g2)
linha
linha <- line(g2[1:3,])
linha$coeff
linha <- line(g2[1:2,])
linha$coeff
linha <- line(g2[1:3,])
linha$coeff
linha$coeff[2]
g2 <- dados[, c(1,3)]
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta
max(beta)
min(beta)
which(beta==min(beta))
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2 <- beta[i]-beta[(i+1)]
}
beta2
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
beta2
max(beta2)
which(beta2==max(beta2))
max(beta2[-16])
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
return(c(pos1+1,pos2+1))
}
clinas(g2)
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
poss <- c(pos1+1,pos2+1)
return(g2[poss,1])
}
clinas(g2)
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
poss <- c(pos1+1,pos2+1)
abline(h=poss)
return(g2[poss,1])
}
clinas(g2)
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
poss <- c(pos1+1,pos2+1)
return(g2[poss,1])
}
abline(v=clinas(g2))
clinas(g2)
sort(clinas(g2))
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
poss <- c(pos1+1,pos2+1)
return(sort(g2[poss,1]))
}
plot()
abline(v=clinas(g2))
plot(g2)
abline(v=clinas(g2))
abline(v=clinas(g2), lty=2)
plot(g2)
abline(v=clinas(g2), lty=2)
dados <- read.table("clipboard", header=T, sep="\t")
g2 <- dados[, c(1,3)]
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
}
pos1 <- which(beta2==max(beta2))
pos2 <- which(beta2[-pos1]==max(beta2[-pos1]))
poss <- c(pos1+1,pos2+1)
return(sort(g2[poss,1]))
}
plot(g2)
abline(v=clinas(g2), lty=2)
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- numeric((length(beta)-1))
posi <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
pos1 <- which(beta2==max(beta2[posi]))
pos2 <- which(beta2==max(beta2[neg]))
poss <- c(pos1+1,pos2+1)
return(sort(g2[poss,1]))
}
plot(g2)
abline(v=clinas(g2), lty=2)
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- numeric((length(beta)-1))
posi <- numeric((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
neg
posi
beta[i]<0 & beta[(i+1)]<0
neg <- character((length(beta)-1))
neg
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- character((length(beta)-1))
posi <- character((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
neg
posi
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- character((length(beta)-1))
posi <- character((length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
pos1 <- which(beta2==max(beta2[posi]))
pos2 <- which(beta2==max(beta2[neg]))
poss <- c(pos1+1,pos2+1)
return(sort(g2[poss,1]))
}
plot(g2)
abline(v=clinas(g2), lty=2)
clinas(g2)
neg <- vector((length(beta)-1))
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- rep(NA, (length(beta)-1))
posi <- rep(NA, (length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
pos1 <- which(beta2==max(beta2[posi]))
pos2 <- which(beta2==max(beta2[neg]))
poss <- c(pos1+1,pos2+1)
sort(g2[poss,1])
clinas <- function(g2){
beta <- numeric((nrow(g2)-2))
for(i in 1:(nrow(g2)-2)){
meio <- g2[i, ]
linha <- line(g2[i:(i+2),])
beta[i] <- linha$coeff[2]
}
beta2 <- numeric((length(beta)-1))
neg <- rep(NA, (length(beta)-1))
posi <- rep(NA, (length(beta)-1))
for(i in 1:(length(beta)-1)){
beta2[i] <- beta[i]-beta[(i+1)]
neg[i] <- beta[i]<0 & beta[(i+1)]<0
posi[i] <- beta[i]>0 & beta[(i+1)]>0
}
pos1 <- which(beta2==max(beta2[posi]))
pos2 <- which(beta2==max(beta2[neg]))
poss <- c(pos1+1,pos2+1)
return(sort(g2[poss,1]))
}
plot(g2)
abline(v=clinas(g2), lty=2)
linha
linha$coeff[2]
g2
clinas(g2)
