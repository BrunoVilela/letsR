}
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
head(PAM_pol)
nrow(PAM_pol)
summary(PAM_pol$Brazil)
table(PAM_pol$Brazil)
summary(PAM_pol[,"Brazil"])
table(PAM_pol[, "Brazil"])
lista <- list.files("C:/Users/Bruno/Documents/bio_10m_bil", pattern=".bil", full.names=T)
vari <- stack(lista)
raster(vari, 1)
temp <- raster(vari, 1)
plot(temp)
save(temp, "data\temp.rda")
getwd()
save(temp, "data/temp.rda")
save(temp, "temp.rda")
?save
save(temp, file="data/temp.rda")
data(temp)
PAM_temp <- lets.addvar(PAM, temp)
head(PAM_temp)
temp
names(temp)
temp@names
lets.addvar <- function(x, y, onlyvar=F, fun=mean){
var_c <- crop(y, x$R)
res1 <- res(var_c)[1]
res2 <- res(x$R)[1]
if(res2>res1){
var_a <- aggregate(var_c, fact= (res2/res1), na.rm=T, fun)
}
if(res2<res1){
var_a <- disaggregate(var_c, fact= (res1/res2), na.rm=T)
}
if(res2==res1){
var_a <- var_c
}
var_r <- resample(var_a, x$R)
var_e <- extract(var_r, x$P[, 1:2])
var_e <- as.matrix(var_e)
colnames(var_e) <- names(y)
resultado <- cbind(x$P, var_e)
if(onlyvar==T){
return(var_e)
}else{
return(resultado)
}
}
data(temp)  # Global mean temperature
data(PAM)  # Phyllomedusa presence-absence matrix
PAM_temp <- lets.addvar(PAM, temp)
head(PAM_temp)
matrix(runif(4), ncol=2, norw=2)
matrix(runif(4), ncol=2, nrow=2)
a <- matrix(runif(4), ncol=2, nrow=2)
a
as.matrix(a)
var <- runif(100)
distan <- matrix(runif(1000), ncol=100, nrow=100)
distan
diag(distan) <- 0
distan
lower.tri(distan)
distan[lower.tri(distan)]
?upper.tri
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan
lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran
?lm
?dist
dist(var)
distan2 <- as.matrix(dist(var))
distan <- distan*distan2
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(log(distan2))
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(log(distan2))
#
distan
distan <- distan*(sqrt(distan2))
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(sqrt(distan2))
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*2)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*4)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*20)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 8, equidistant=F, plot=TRUE)
moran
moran <- lets.correl(var, distan, 8, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*20)*(distan2*runif(100))
#
moran <- lets.correl(var, distan, 8, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 8, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
x11()
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
moran
data(PAM)
colsums(PAM$R)
colSums(PAM$R)
colSums(PAM$M)
colSums(PAM$ma)
names(PAM)
colSums(PAM$P)
colSums(PAM$P)[-(1:2)]
colSums(PAM$P)[-(1:2)]
colSums(PAM$P)[-(1:2)]
range <- colSums(PAM$P)[-(1:2)]
lets.field(PAM, range, PAM$S, weigth=TRUE)
data(PAM)
range <- colSums(PAM$P)[-(1:2)]
lets.field(PAM, range, PAM$S, weigth=TRUE)
field <- lets.field(PAM, range, PAM$S, weigth=TRUE)
cor(field[, 2], var)
cor(field[, 2], var)
length(var)
nrow(field)
cor(field[, 2], range)
cor(field[, 2], range, na.rm=T)
cor(field[!is.na(field[,2]), 2], range[!is.na(field[,2])])
data(PAM)
plot(PAM)
plot(PAM, name=PAM$S[1])
plot(PAM, name=PAM$S[2])
plot(PAM, name=PAM$S[3])
plot(PAM, name=PAM$S[4])
PAM$S[2]
PAM$S[4]
plot(PAM, name="Phyllomedusa azurea")
plot(PAM, name="Phyllomedusa atelopoides")
plot(PAM, name="Phyllomedusa azurea")
library(letsR)
?letsR
library(letsR)
library(letsR)
library(letsR)
?letsR
library(letsR)
library(letsR)
?letsR
?letsR-package
?"letsR-package"
library(letsR)
?lestR
?letsR
library(letsR)
?letsR
library(github)
library(devtools)
?install_github
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(devtools)
library(letsR)
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15))
summary(PAM)
plot(PAM)  # Species richness map
plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM, name="Phyllomedusa nordestina", main="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM, main="Species Richness")  # Species richness map
plot(PAM, name="Phyllomedusa nordestina", main="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM, main="Species Richness")  # Species richness map
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15), res=2)
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15), resolution=2)
?lets.presab
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15), resol=2)
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, resol=2))
summary(PAM)
plot(PAM, main="Species Richness")  # Species richness map
plot(PAM, name="Phyllomedusa nordestina", main="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM, main="Species Richness")  # Species richness map
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, resol=0.1))
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, resol=0.2))
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, resol=0.2, count=TRUE))
system.time(PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15, resol=0.5, count=TRUE))
plot(PAM, main="Species Richness")  # Species richness map
plot(PAM, name="Phyllomedusa nordestina", main="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM, main="Species Richness")  # Species richness map
setwd("C:/Users/Bruno/Desktop")
sp <- read.table("species.txt", header=T)
head(sp)
nomes <- read.table("list.txt", header=T)
nomes
as.vector(nomes)
sp2 <- sp[, nomes]
as.character(nomes)
as.numeric(nomes)
sp2 <- sp[, as.factor(nomes)]
as.factor(nomes)
dim(sp)
class(sp)
sp$nomes
nomes
class(nomes)
as.numeric(nomes)
as.factors(nomes)
as.factor(nomes)
factor(nomes)
nomes <- read.table("list.txt")
nomes
nomes <- read.table("list.txt", header=T)
nomes$list
sp2 <- sp[, nomes$list]
sp2
head(sp2)
dim(sp2)
length(nomes)
dim(nomes)
?write.table
setwd("C:/Users/Bruno/Desktop")
sp <- read.table("species.txt", header=T)
nomes <- read.table("list.txt", header=T)
resultado <- sp[, nomes$list]
write.table(resltado, "resultado.txt", row.names=F, sep="\t")
write.table(resultado, "resultado.txt", row.names=F, sep="\t")
head(resultado)
class(resultado)
write.table(resultado, "resultado.txt", row.names=F)
?list.files
setwd("C:/Users/Bruno/Desktop") # muda para o caminho onde estiver seus arquivos
sp <- read.table("species.txt", header=T)
nomes <- read.table("list.txt", header=T)
resultado <- sp[, nomes$list]
head(resultado)
colnames(resultado)==nomes$list
resultado%in%nomes$list
colnames(resultado)%in%nomes$list
colnames(sp)%in%nomes$list
resultado <- sp[, colnames(sp)%in%nomes$list]
colnames(resultado)%in%nomes$list
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(letsR)
?gsub
?raster
library(letsR)
?gsub
data(Phyllomedusa)
Phyllomedusa
names(Phyllomedusa)
Phyllomedusa$source
Phyllomedusa$citation
names(Phyllomedusa)
Phyllomedusa$year
Phyllomedusa$id_no
Phyllomedusa$tax_comm
Phyllomedusa$compiler
Phyllomedusa$legend
Phyllomedusa$citation
names(Phyllomedusa)
Phyllomedusa$source
levels(Phyllomedusa$source)
Phyllomedusa[,-"Source"]
names(Phyllomedusa)
names(Phyllomedusa[,-8])
Phyllomedusa <- Phyllomedusa[,-8]
?save
save(Phyllomedusa, file="Phyllomedusa.rda")
getwd
getwd()
R CMD build --resave-data
save(Phyllomedusa, file="Phyllomedusa.rda", compress="xz")
library(letsR)
data(Phyllomedusa)
Phyllomedusa
names(Phyllomedusa)
levels(Phyllomedusa$legend)
levels(Phyllomedusa$compiler)
levels(Phyllomedusa$tax_comm)
names(Phyllomedusa)
Phyllomedusa <- Phyllomedusa[,-14]
save(Phyllomedusa, file="Phyllomedusa.rda", compress="xz")
library(letsR)
data(Phyllomedusa)
names(Phyllomedusa)
levels(Phyllomedusa$citation)
names(Phyllomedusa)
Phyllomedusa <- Phyllomedusa[,-c(1,5,6,7,8,9,10,11,12)]
Phyllomedusa
plot(Phyllomedusa)
save(Phyllomedusa, file="Phyllomedusa.rda", compress="xz")
library(letsR)
library(letsR)
lets.presab
?lets.presab
library(letsR)
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)  # Species richness map
plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
plot(PAM)
?CRS
?SpatialPolygon
?SpatialPolygons
library(letsR)
library(letsR)
?resaveRdaFiles()
resaveRdaFiles()
library(letsR)
?letsR
