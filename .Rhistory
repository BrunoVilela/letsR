}
# Loop start, running repetitions for the number of species (n)
for(i in 1:n){
plot.new()
text(0.5, 0.5, paste(paste("Total:", n, "\n","Species to go: ", (n - i))))
celulas2 <- .extractpos.points(species, nomesi, xy, ras)
matriz[celulas2, i] <- 1
}
dev.off()
}
if (count) {
for(i in 1:n) {
celulas2 <- .extractpos.points(species, nomesi, xy, ras)
matriz[celulas2, i] <- 1
}
}
Resultado <- cbind(coord, matriz)
if (remove.cells) {
Resultado <- .removeCells(Resultado)
}
if (remove.sp) {
Resultado <- .removeSp(Resultado)
}
if (show.matrix) {
return(Resultado)
} else {
values(ras) <- rowSums(matriz)
final <- list("Presence_and_Absence_Matrix" = Resultado,
"Richness_Raster"= ras,
"Species_name"= colnames(Resultado)[-(1:2)])
class(final) <- "PresenceAbsence"
}
final
summary(final)
plot(final)
remove.cells
remove.sp
Resultado
colSums(Resultado)
colSums(matriz)
celulas2
celulas2
if (count) {
# Do not set a new device in rstudio to avoid warnings()
if (!"tools:rstudio" %in% search()) {
dev.new(width = 2, height = 2, pointsize = 12)
par(mar = c(0, 0, 0, 0))
}
# Loop start, running repetitions for the number of species (n)
for(i in 1:n){
plot.new()
text(0.5, 0.5, paste(paste("Total:", n, "\n","Species to go: ", (n - i))))
celulas2 <- .extractpos.points(species, nomesi, xy, ras)
matriz[celulas2, i] <- 1
}
dev.off()
}
count
if (count) {
for(i in 1:n) {
celulas2 <- .extractpos.points(species, nomesi, xy, ras)
matriz[celulas2, i] <- 1
}
}
colSums(matriz)
celulas2
i
i=1
count
library(letsR)
letsR
?lets.presab.points
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93, xmx = -29,
ymn = -57, ymx = 15)
library(letsR)
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93, xmx = -29,
ymn = -57, ymx = 15)
PAM
plot(PAM)
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93, xmx = -29,
ymn = -57, ymx = 15, count = TRUE)
plot(PAM)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Simulated species richness map")
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Species richness map (simulated)")
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn = -93, xmx = -29, ymn = -57, ymx = 15, count = TRUE)
summary(PAM)
library(letsR)
lets.presab.points
lets.presab.points
?lets.presab.points
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93, xmx = -29,
ymn = -57, ymx = 15)
summary(PAM)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Species richness map (simulated)")
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
library(testhat)
library(testthat)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
PAM <- lets.presab.points(xy, species)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15, count = TRUE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15, remove.sp = FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15, remove.cells = TRUE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Cellswithoutanypresence > 0)
response <- summary(PAM)
response
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15, remove.cells = FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Cellswithoutanypresence > 0)
species <- c(rep("sp1", 100), rep("sp2", 100),
rep("sp3", 100), rep("sp4", 100),
rep("sp5", 1))
x <- runif(400, min = -69, max = -51)
y <- runif(400, min = -23, max = -4)
x <- c(x, 1000)
y <- c(y, 1000)
xy <- cbind(x, y)
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15)
summary(PAM)
PAM <- lets.presab.points(xy, species, xmn = -93,
xmx = -29, ymn = -57,
ymx = 15, remove.sp = FALSE)
summary(PAM)
response <- summary(PAM)
names(response)
library(letsR)
?lets.presab.points
library(letsR)
library(letsR)
?lets.presab.points
is.character
c(TRUE, FALSE, TRUE)
length(c(TRUE, FALSE, TRUE))
library(letsR)
data(PAM)
names(PAM)
readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp")
Brasil <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp")
library(maptoold)
library(maptools)
Brasil <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp")
Brasil <- readShapePoly("C:/Users/Bruno/Documents/Mapas/brazil2.shp", repair = TRUE)
Brasil <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp", repair = TRUE)
plot(Brasil)
data(PAM)
plot(PAM)
lets.pamcrop(PAM, Brasil) -> pam2
plot(pam2)
lets.pamcrop(PAM, Brasil, remove.cells = FALSE) -> pam2
summary(pam2)
plot(PAM2)
plot(pam2)
summary(pam2)
colSums(pam2[[2]][-1:2])
colSums(pam2[[2]][, -(1:2)])
rowSums(pam2[[2]][, -(1:2)])
rowSums(pam2[[2]][, -(1:2)], na.rm = TRUE)
pam2[[2]]
rowSums(pam2[[1]][, -(1:2)], na.rm = TRUE)
rowSums(pam2[[1]][, -(1:2)], na.rm = TRUE)==0
sum(rowSums(pam2[[1]][, -(1:2)], na.rm = TRUE)==0)
lets.pamcrop(PAM, Brasil, remove.sp = FALSE) -> pam2
summary(pam2)
names(pam2)
library(letsR)
Brasil <- readShapePoly("C:/Users/Bruno/Documents/Mapas/uf_car.shp")
save(Brasil, list = "Brazil")
save(Brasil, file = "Brazil")
save(Brasil, file = "Brazil.rda")
library(rgeos)
?gUnion
Brazil <- gUnion(Brasil)
Brazil <- gUnaryUnion(Brasil)
plot(Brazil)
save(Brazil, file = "Brazil.rda")
data(iucn)
iucn
is.na
library(letsR)
library(testhat)
library(testthat)
data(Brazil)
data(PAM)
resu_test <- lets.pamcrop(PAM, Brazil, remove.sp = TRUE)
expect_equal(class(resu_test), "PresenceAbsence")
expect_equal(class(resu_test[[1]]), "matrix")
expect_true(inherits(resu_test[[2]], "RasterLayer"))
expect_equal(class(resu_test[[3]]), "character")
response <- summary(resu_test)
expect_true(response$Specieswithoutanypresence == 0)
resu_test <- lets.pamcrop(PAM, Brazil, remove.sp = FALSE)
expect_equal(class(resu_test), "PresenceAbsence")
expect_equal(class(resu_test[[1]]), "matrix")
expect_true(inherits(resu_test[[2]], "RasterLayer"))
expect_equal(class(resu_test[[3]]), "character")
response <- summary(resu_test)
expect_true(response$Specieswithoutanypresence > 0)
Brazil
data(PAM)
# PAM before crop
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness")
# Crop PAM to Brazil
data(Brazil)
PAM_crop <- lets.pamcrop(PAM, Brazil, remove.sp = TRUE)
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)")
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette("green", "yellow", "blue"))
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette("green", "yellow", "blue"))
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette("green", "yellow", "blue"))
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette(c("green", "yellow", "blue")))
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette(c("darkgreen", "yellow", "blue")))
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness")
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette(c("darkgreen", "yellow", "blue")))
library(letsR)
## Not run:
data(PAM)
# PAM before crop
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness")
# Crop PAM to Brazil
data(Brazil)
PAM_crop <- lets.pamcrop(PAM, Brazil, remove.sp = TRUE)
plot(PAM_crop, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness (Brazil crop)",
col = colorRampPalette(c("darkgreen", "yellow", "blue")))
## End(Not run)
data(PAM)
names(PAM)
resu_test <- lets.gridirizer(PAM)
class(resu_test[[1]])
class(resu_test[[2]])
expect_equal(class(resu_test), "list")
expect_equal(class(resu_test[[1]]), "SpatialPolygonsDataFrame")
expect_equal(class(resu_test[[2]]), "matrix")
class(resu_test[[1]]
)
expect_true(inherits(resu_test[[1]], "SpatialPolygonsDataFrame"))
expect_equal(class(resu_test), "list")
expect_true(inherits(resu_test[[1]], "SpatialPolygonsDataFrame"))
expect_equal(class(resu_test[[2]]), "matrix")
library(letsR)
data(wrld_simpl)  # World map
data(wrld_simpl)
plot(wrld_simpl)
data(wrld_simpl)  # World map
Brazil <- wrld_simpl[wrld_simpl$NAME=="Brazil", ]  # Brazil (polygon)
Brazil
data(PAM)
resu_test <- lets.pamcrop(PAM, Brazil, remove.sp = TRUE)
?wrld_simpl
plot(resu_test)
plot(PAM)
PAM[[2]]
extent(PAM[[2]])
as.matrix(extent(PAM[[2]]))
as.vector(extent(PAM[[2]]))
extent(PAM[[2]])
library(letsR)
data(PAM)  # Phyllomedusa presence-absence matrix
require(maptools)
data(wrld_simpl)  # World map
Brazil <- wrld_simpl[wrld_simpl$NAME == "Brazil", ]  # Brazil (polygon)
# Check where is the variable name (in this case it is in "NAME" which will be my z value)
names(Brazil)
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
onlyvar = FALSE
x <- PAM
y <- Brazil
z <- "NAME"
pos1 <- names(y) == z
pos1
names(y)[pos1] <- "NOME"
nomes <- y$NOME
nomes
pos1 <- names(y) == z
names(y)
as.character(y$NOME)
valores <- values(x[[2]])
valores
LenValues <- length(valores)
n <- nrow(y)
matriz <- matrix(0, ncol = n, nrow = LenValues)
colnames(matriz) <- nomes
matriz
head(matriz)
xy <- xyFromCell(x[[2]], 1:LenValues)
areashape <- areaPolygon(y)
devtools::load_all(".")
areashape <- areaPolygon(y)
library(maptools)
library(geosphere)
library(fileds)
library(fields)
areashape <- areaPolygon(y)
areagrid <- NULL
global <- all(as.vector(extent(PAM[[2]])) == c(-180, 180, -90, 90))
global
!global
grid <- rasterToPolygons(x[[2]])
grid
areagrid <- try(areaPolygon(grid), silent=TRUE)
areagrid
class(areagrid) == "try-error" | global
if (class(areagrid) == "try-error" | global) {
areagrid <- values(area(x[[2]])) * 1000000
}
position <- !is.na(valores)
position
n
i=1
celu <- extract(x[[2]], y[i, ], cellnumber = TRUE,
small = TRUE, weights = TRUE)
celu2 <- do.call(rbind.data.frame, celu)
celu2
!is.null(celu2[, 2])
celu2 <- celu2[!is.na(celu2[, 2]), ]
celu2
calc1 <- (celu2[, 3] * areashape[i])
calc1
calc2 <- areagrid[position%in%celu2[, 1]]
calc2
position <- which(!is.na(valores))
calc2 <- areagrid[position %in% celu2[, 1]]
position <- which(!is.na(valores))
calc2 <- areagrid[position %in% celu2[, 1]]
calc2
prop <- round(calc1 / calc2, 2)
prop
prop1 <- prop > 1
prop1
any(prop1)
if (any(prop1)) {
prop[prop1] <- 1
}
celu2[, 1]
i
matriz[celu2[, 1], i] <- prop
r <- rasterize(xy, x[[2]], matriz)
rExtract <- extract(r, x[[1]][, 1:2])
rExtract <- as.matrix(rExtract)
colnames(rExtract) <- nomes
rExtract
library(letsR)
data(PAM)  # Phyllomedusa presence-absence matrix
require(maptools)
data(wrld_simpl)  # World map
Brazil <- wrld_simpl[wrld_simpl$NAME == "Brazil", ]  # Brazil (polygon)
# Check where is the variable name
# (in this case it is in "NAME" which will be my z value)
names(Brazil)
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
head(PAM_pol)
resu_test <- lets.addpoly(PAM, Brazil, "NAME", onlyvar = FALSE)
ncol(resu_test)
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) > 1)
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
resu_test <- lets.addpoly(PAM, Brazil, "NAME", onlyvar = TRUE)
expect_equal(class(resu_test), "matrix")
expect_true(ncol(resu_test) == 1)
data(PAM)
summary(PAM)
data(iucn)
library(letsR)
summary(PAM)
iucn
head(iucn)
iucn$Status
iucn$Status == VU
iucn$Status == "VU"
iucn$Status == "EN"
rowSums(PAM[[2]][, iucn$Status == "EN"])
PAM[[2]]
PAM[[1]][, iucn$Status == "EN"]
rowSums(PAM[[1]][, iucn$Status == "EN"])
rasEN <- PAM[[2]]
values(rasEN) <- rowSums(PAM[[1]][, iucn$Status == "EN"])
ras <- PAM[[2]]
ENrich <- rowSums(PAM[[1]][, iucn$Status == "EN"])
rasEN <- rasterize(PAM[[1]][, 1:2], ras, field= ENrich)
plot(rasEN)
map(add=TRUE)
plot(rasEN, xlab = "Longitude", ylab = "Latitude")
map(add=TRUE)
plot(rasEN, xlab = "Longitude", ylab = "Latitude", main = "Endangered species")
map(add=TRUE)
ENrich <- rowSums(PAM[[1]][, iucn$Status == "EN"])
ENrich
iucn$Status
ENrich <- rowSums(PAM[[1]][, iucn$Status == "LC"])
ras <- PAM[[2]]
LCrich <- rowSums(PAM[[1]][, iucn$Status == "LC"])
rasLC <- rasterize(PAM[[1]][, 1:2], ras, field = LCrich)
plot(rasEN, xlab = "Longitude", ylab = "Latitude",
main = "Endangered species")
map(add=TRUE)
plot(rasLC, xlab = "Longitude", ylab = "Latitude",
main = "Least Concern species")
map(add=TRUE)
ras <- PAM[[2]]
LCrich <- rowSums(PAM[[1]][, (which(iucn$Status == "LC")+2)])
rasLC <- rasterize(PAM[[1]][, 1:2], ras, field = LCrich)
plot(rasLC, xlab = "Longitude", ylab = "Latitude",
main = "Least Concern species")
map(add=TRUE)
plot(rasLC, xlab = "Longitude", ylab = "Latitude",
main = "Least Concern species",
col = rev(heat.colors(100)))
map(add=TRUE)
data(PAM)
xy = PAM
if (class(xy) == "PresenceAbsence"){
xy <- xy[[1]][, 1:2]
}
xy
n <- nrow(xy)
library(fields)
rdist.earth(xy)
rdist.earth(xy[1:10, ])
exists(miles)
exists("miles")
library(letsR)
data(PAM)
lets.distmat(PAM)
library(letsR)
?lets.distmat
library(letsR)
?lets.distmat
