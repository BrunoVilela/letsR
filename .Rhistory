lets.iucncont(iucn)
status
status <- sample(c("EN","VU", "NT", "CR", "DD", "LC"), 30, replace=TRUE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data defficient", "NON-Threatened"), NUMERIC=TRUE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data defficient", "NON-Threatened"), NUMERIC=FALSE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data defficient", "Non-Threatened"), NUMERIC=FALSE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data Deficient", "Non-Threatened"), NUMERIC=FALSE)
status <- sample(c("EN","VU", "NT", "CR", "DD", "LC"), 30, replace=TRUE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data Deficient", "Non-Threatened"), NUMERIC=FALSE)
status <- sample(c("EN","VU", "NT", "CR", "DD", "LC"), 30, replace=TRUE)
lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data Deficient", "Non-Threatened"), NUMERIC=FALSE)
statustrans <- lets.transf(status, c("EN","VU", "NT", "CR", "DD", "LC"), c("Threatened","Threatened", "Non-Threatened", "Threatened", "Data Deficient", "Non-Threatened"), NUMERIC=FALSE)
statustrans
data(Phyllomedusa)
Phyllomedusa
names(Phyllomedusa)
Phyllomedusa$presence
Phyllomedusa$origin
Phyllomedusa$oseasonal
Phyllomedusa$seasonal
library(letsR)
?lets.presab
?lets.iucn
#Packages
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(devtools)
map()
map()->a
a
class(a)
?maptools
?maptools
??maptools
?data
data()
data(wrld_simpl)
names(wrld_simpl)
wrld_simpl$RE
wrld_simpl$REGION
wrld_simpl$NAME
Brazil <- wrld_simpl[wrld_simpl$NAME=="Brazil", ]
plot(Brazil)
PAM_pol <- lets.addpoly(PAM, Brazil)
library(letsR)
PAM_pol <- lets.addpoly(PAM, Brazil)
PAM_pol <- lets.addpoly(PAM, Brazil, "name")
data(PAM)
PAM_pol <- lets.addpoly(PAM, Brazil, "name")
head(PAM_pol)
names(Brazil)
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
head(PAM_pol)
Brazil$NAME
x=PAM
y=Brazil
z="NAME"
pos1 <- which(names(y)==z)
pos1
names(y)[pos1] <- "NOME"
valores <- values(x$R)
n <- nrow(y)
matriz <- matrix(0, ncol=n, nrow=length(valores))
nomes <- y$NOME
nomes
colnames(matriz) <- nomes
head(matriz)
lets.addpoly <- function(x, y, z, onlyvar=F){
pos1 <- which(names(y)==z)
names(y)[pos1] <- "NOME"
valores <- values(x$R)
n <- nrow(y)
matriz <- matrix(0, ncol=n, nrow=length(valores))
nomes <- y$NOME
colnames(matriz) <- nomes
xy <- xyFromCell(x$R, 1:length(valores))
for(i in 1:n){
celu <- extract(x$R, y[i,], cellnumber=T, small=T,  weights=T)
celu2 <- do.call(rbind.data.frame, celu)
matriz[celu2[,1], i] <- celu2[,3]
}
r <- rasterize(xy, x$R, matriz)
r_e <- extract(r, x$P[,1:2])
resultado <- cbind(x$P, r_e)
colnames(resultado)[(lentgh(PAM$S)+2):ncol(resultado)] <- nomes
colnames(r_e)[3:ncol(r_e)] <- nomes
if(onlyvar==T){
return(r_e)
}else{
return(resultado)
}
}
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
lets.addpoly <- function(x, y, z, onlyvar=F){
pos1 <- which(names(y)==z)
names(y)[pos1] <- "NOME"
valores <- values(x$R)
n <- nrow(y)
matriz <- matrix(0, ncol=n, nrow=length(valores))
nomes <- y$NOME
colnames(matriz) <- nomes
xy <- xyFromCell(x$R, 1:length(valores))
for(i in 1:n){
celu <- extract(x$R, y[i,], cellnumber=T, small=T,  weights=T)
celu2 <- do.call(rbind.data.frame, celu)
matriz[celu2[,1], i] <- celu2[,3]
}
r <- rasterize(xy, x$R, matriz)
r_e <- extract(r, x$P[,1:2])
resultado <- cbind(x$P, r_e)
colnames(resultado)[(length(PAM$S)+2):ncol(resultado)] <- nomes
colnames(r_e)[3:ncol(r_e)] <- nomes
if(onlyvar==T){
return(r_e)
}else{
return(resultado)
}
}
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
pos1 <- which(names(y)==z)
names(y)[pos1] <- "NOME"
valores <- values(x$R)
n <- nrow(y)
matriz <- matrix(0, ncol=n, nrow=length(valores))
nomes <- y$NOME
colnames(matriz) <- nomes
xy <- xyFromCell(x$R, 1:length(valores))
for(i in 1:n){
celu <- extract(x$R, y[i,], cellnumber=T, small=T,  weights=T)
celu2 <- do.call(rbind.data.frame, celu)
matriz[celu2[,1], i] <- celu2[,3]
}
r <- rasterize(xy, x$R, matriz)
r_e <- extract(r, x$P[,1:2])
resultado <- cbind(x$P, r_e)
colnames(resultado)
colnames(r_e)
class(r_e)
r_e
as.matrix(r_e)
}
lets.addpoly <- function(x, y, z, onlyvar=F){
pos1 <- which(names(y)==z)
names(y)[pos1] <- "NOME"
valores <- values(x$R)
n <- nrow(y)
matriz <- matrix(0, ncol=n, nrow=length(valores))
nomes <- y$NOME
colnames(matriz) <- nomes
xy <- xyFromCell(x$R, 1:length(valores))
for(i in 1:n){
celu <- extract(x$R, y[i,], cellnumber=T, small=T,  weights=T)
celu2 <- do.call(rbind.data.frame, celu)
matriz[celu2[,1], i] <- celu2[,3]
}
r <- rasterize(xy, x$R, matriz)
r_e <- extract(r, x$P[, 1:2])
r_e <- as.matrix(r_e)
colnames(r_e) <- nomes
resultado <- cbind(x$P, r_e)
if(onlyvar==T){
return(r_e)
}else{
return(resultado)
}
}
PAM_pol <- lets.addpoly(PAM, Brazil, "NAME")
head(PAM_pol)
nrow(PAM_pol)
summary(PAM_pol$Brazil)
table(PAM_pol$Brazil)
summary(PAM_pol[,"Brazil"])
table(PAM_pol[, "Brazil"])
lista <- list.files("C:/Users/Bruno/Documents/bio_10m_bil", pattern=".bil", full.names=T)
vari <- stack(lista)
raster(vari, 1)
temp <- raster(vari, 1)
plot(temp)
save(temp, "data\temp.rda")
getwd()
save(temp, "data/temp.rda")
save(temp, "temp.rda")
?save
save(temp, file="data/temp.rda")
data(temp)
PAM_temp <- lets.addvar(PAM, temp)
head(PAM_temp)
temp
names(temp)
temp@names
lets.addvar <- function(x, y, onlyvar=F, fun=mean){
var_c <- crop(y, x$R)
res1 <- res(var_c)[1]
res2 <- res(x$R)[1]
if(res2>res1){
var_a <- aggregate(var_c, fact= (res2/res1), na.rm=T, fun)
}
if(res2<res1){
var_a <- disaggregate(var_c, fact= (res1/res2), na.rm=T)
}
if(res2==res1){
var_a <- var_c
}
var_r <- resample(var_a, x$R)
var_e <- extract(var_r, x$P[, 1:2])
var_e <- as.matrix(var_e)
colnames(var_e) <- names(y)
resultado <- cbind(x$P, var_e)
if(onlyvar==T){
return(var_e)
}else{
return(resultado)
}
}
data(temp)  # Global mean temperature
data(PAM)  # Phyllomedusa presence-absence matrix
PAM_temp <- lets.addvar(PAM, temp)
head(PAM_temp)
matrix(runif(4), ncol=2, norw=2)
matrix(runif(4), ncol=2, nrow=2)
a <- matrix(runif(4), ncol=2, nrow=2)
a
as.matrix(a)
var <- runif(100)
distan <- matrix(runif(1000), ncol=100, nrow=100)
distan
diag(distan) <- 0
distan
lower.tri(distan)
distan[lower.tri(distan)]
?upper.tri
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan
lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
#randon distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#
lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran
?lm
?dist
dist(var)
distan2 <- as.matrix(dist(var))
distan <- distan*distan2
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(log(distan2))
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(log(distan2))
#
distan
distan <- distan*(sqrt(distan2))
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- distan*(sqrt(distan2))
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*2)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*4)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*20)*(distan2)
#
moran <- lets.correl(var, distan, 10, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 8, equidistant=F, plot=TRUE)
moran
moran <- lets.correl(var, distan, 8, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan*20)*(distan2*runif(100))
#
moran <- lets.correl(var, distan, 8, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 8, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
var <- runif(100)  # random variable
#correlated distance
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
#
moran <- lets.correl(var, distan, 5, equidistant=T, plot=TRUE)
moran <- lets.correl(var, distan, 5, equidistant=F, plot=TRUE)
x11()
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
moran
data(PAM)
colsums(PAM$R)
colSums(PAM$R)
colSums(PAM$M)
colSums(PAM$ma)
names(PAM)
colSums(PAM$P)
colSums(PAM$P)[-(1:2)]
colSums(PAM$P)[-(1:2)]
colSums(PAM$P)[-(1:2)]
range <- colSums(PAM$P)[-(1:2)]
lets.field(PAM, range, PAM$S, weigth=TRUE)
data(PAM)
range <- colSums(PAM$P)[-(1:2)]
lets.field(PAM, range, PAM$S, weigth=TRUE)
field <- lets.field(PAM, range, PAM$S, weigth=TRUE)
cor(field[, 2], var)
cor(field[, 2], var)
length(var)
nrow(field)
cor(field[, 2], range)
cor(field[, 2], range, na.rm=T)
cor(field[!is.na(field[,2]), 2], range[!is.na(field[,2])])
data(PAM)
plot(PAM)
plot(PAM, name=PAM$S[1])
plot(PAM, name=PAM$S[2])
plot(PAM, name=PAM$S[3])
plot(PAM, name=PAM$S[4])
PAM$S[2]
PAM$S[4]
plot(PAM, name="Phyllomedusa azurea")
plot(PAM, name="Phyllomedusa atelopoides")
plot(PAM, name="Phyllomedusa azurea")
library(letsR)
?letsR
library(letsR)
library(letsR)
library(letsR)
?letsR
library(letsR)
library(letsR)
?letsR
?letsR-package
?"letsR-package"
library(letsR)
?lestR
?letsR
library(letsR)
?letsR
