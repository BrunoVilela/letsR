i=1
groups
freqi[i, ] <- hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts
length(hist(x[(sps[, i]==1), pos], breaks=freq, plot=FALSE)$counts)
library(letsR)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
resu
?round
round(0.3232323, 2)
round(0.3232323, 3)
freq
round(freq, 2)
library(letsR)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=10)
head(resu)
resu <- lets.classvar(x=pamvar, pos=ncol(pamvar), xy=TRUE, groups=45)
head(resu)
?quantile
freq <- quantile(x[, pos], seq(0, 1, (1/groups)), na.rm=TRUE)
?hist
hist(temperature)
hist(values(temperature))
values(temperature)
temperature
library(letsR)
?dist
?vegdist
library(letsR)
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=FALSE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
var <- runif(100)  # random variable
# Correlated distance matrix
distan <- matrix(runif(1000), ncol=100, nrow=100)
diag(distan) <- 0
ind <- lower.tri(distan)
distan[ind] <- t(distan)[ind]
distan[lower.tri(distan)] <- distan[upper.tri(distan)]
distan2 <- as.matrix(dist(var))
distan <- (distan)*(distan2)
moran <- lets.correl(var, distan, 5, equidistant=TRUE, plot=TRUE)
moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
#' @examples \dontrun{
#' var <- runif(100)  # random variable
#'
#' # Correlated distance matrix
#' distan <- matrix(runif(1000), ncol=100, nrow=100)
#' diag(distan) <- 0
#' ind <- lower.tri(distan)
#' distan[ind] <- t(distan)[ind]
#' distan[lower.tri(distan)] <- distan[upper.tri(distan)]
#' distan2 <- as.matrix(dist(var))
#' distan <- (distan)*(distan2)
#'
#' moran <- lets.correl(var, distan, 12, equidistant=TRUE, plot=TRUE)
#' }
moran <- lets.correl(var, distan, 10, equidistant=TRUE, plot=TRUE)
moran <- lets.correl(var, distan, 10, equidistant=FALSE, plot=TRUE)
library(letsR)
library(maps)
?lets.presab
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
plot(Phyllomedusa)
library(rgdal)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")  # Map of the specific species
PAM
names(PAM)
head(PAM$P)
Phyllomedusa
test <- lets.iucn(PAM$S)
head(test)
lets.presab.points
?lets.presab.points
library(letsR)
?lets.presab
data(Phyllomedusa)
library(rgdal)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
summary(PAM)
plot(PAM)
library(maps)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")
?lets.midpoint
mid <- lets.midpoint(PAM)
mid
lets.iucn("homo sapiens")
lets.iucn.ha("homo sapiens")
lets.iucn.his("homo sapiens")
library(letsR)
a <- read.table("clipboard", sep="\t", header=TRUE)
library(raster)
r <- raster(res=1/4)
a2 <- rasterize(a[,c(1,2)], r, values=a[,c(3, ncol(a))])
plot(a2)
ex <- drawExtent()
a3 < -crop(a2, ex)
a3 <-crop(a2, ex)
plot(a3)
a3
a2 <- rasterize(a[,c(1,2)], r, values=a[,4])
#ex <- drawExtent()
a3 <-crop(a2, ex)
plot(a3)
a3
a[,4]
a2 <- rasterize(a[,c(1,2)], r, values=a[,4])
a3 <-crop(a2, ex)
plot(a3)
?rasterize
a2 <- rasterize(a[,c(1,2)], r, field=a[,4])
#ex <- drawExtent()
a3 <-crop(a2, ex)
plot(a3)
a3
a2 <- rasterize(a[,c(1,2)], r, field=a[,3:ncol(a)])
a3 <-crop(a2, ex)
plot(a3)
a3
library(aps)
library(maps)
library(rgdal)
library(letsR)
?lets.presab
data(Phyllomedusa)
plot(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15)
PAM
summary(PAM)
plot(PAM)
plot(PAM, name="Phyllomedusa nordestina")
lets.iucn("Panthera onca")
filo <- read.nexus("Filo_srg_puts_total_f50F.nex")
# Packages
library(letsR)
library(maps)
library(ape)
library(PVR)
library(vegan)
library(geosphere)
library(rgdal)
library(letsR)
?lets.presab
library(letsR)
contributors()
library(letsR)
roxygenize("letsR")
library(roxygen2)
roxygenize("letsR")
?roxygen2
?roxygenize
roxygenize('.', roclets=c('rd', 'collate', 'namespace'))
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?temp
data(temp)
plot(temp)
temp
data(Phyllomedusa)
Phyllomedusa
plot(Phyllomedusa)
library(rgdal)
plot(Phyllomedusa)
plot(temp)
?lets_cont
library(letsR)
lets_cont
?lets_cont
library("devtools")
install_github("BrunoVilela/letsR")
library(letsR)
?lets.cont
?lets.iucncont
data(Phyllomedusa)
data(PAM)
data(IUCN)
ponto <- lets.midpoint(PAM)
mpl <- lets.maplizer(PAM, iucn$Description_Year, iucn$Species, ras=T)
mpl2 <- lets.maplizer(PAM, colSums(PAM$P[,-(1:2)]), iucn$Species, ras=T)
mod <- lm(iucn$Description_Year~colSums(PAM$P[,-(1:2)]))
distanc <- matrix(0, ncol=nrow(ponto), nrow=nrow(ponto))
for(i in 1:nrow(ponto)){
for(j in 1:nrow(ponto)){
distanc[i,j] <- distCosine(ponto[i, 2:3], ponto[j, 2:3])
}
}
library(letsR)
distanc <- matrix(0, ncol=nrow(ponto), nrow=nrow(ponto))
for(i in 1:nrow(ponto)){
for(j in 1:nrow(ponto)){
distanc[i,j] <- distCosine(ponto[i, 2:3], ponto[j, 2:3])
}
}
library(raster)
library(maptools)
library(maps)
library(XML)
library(geosphere)
library(sp)
data(Phyllomedusa)
data(PAM)
data(IUCN)
ponto <- lets.midpoint(PAM)
mpl <- lets.maplizer(PAM, iucn$Description_Year, iucn$Species, ras=T)
mpl2 <- lets.maplizer(PAM, colSums(PAM$P[,-(1:2)]), iucn$Species, ras=T)
mod <- lm(iucn$Description_Year~colSums(PAM$P[,-(1:2)]))
distanc <- matrix(0, ncol=nrow(ponto), nrow=nrow(ponto))
for(i in 1:nrow(ponto)){
for(j in 1:nrow(ponto)){
distanc[i,j] <- distCosine(ponto[i, 2:3], ponto[j, 2:3])
}
}
x11(width=40, height=15)
par(mfrow=c(1,3), mar=c(1, 1, 1, 1))
plot(PAM$R, col="white", axes=FALSE, box=FALSE, legend=F)
plot(Phyllomedusa, col=rainbow(46, alpha=0.5), add=T)
map(add=T)
text(labels="A", y=14, x=-78, cex=2)
plot(PAM, axes=FALSE, box=FALSE)
text(labels="B", y=14, x=-78, cex=2)
plot(PAM, name="Phyllomedusa nordestina", axes=FALSE, box=FALSE)
plot(Phyllomedusa[grep("nordestina",Phyllomedusa$binomial), ],
add=T, lwd=2, border="gray81")
points(ponto[PAM$S=="Phyllomedusa nordestina", 2:3], col="gray81", pch=20, cex=1.5)
text(labels="C", y=14, x=-78, cex=2)
colfunc <- colorRampPalette(c("green", "yellow", "red"))
x11(width=40, height=15)
par(mfrow=c(1,3), mar=c(5, 5, 5, 1))
plot(y=iucn$Description_Year,x=colSums(PAM$P[,-(1:2)]), cex=1.5, bty="l",
pch=20, ylab="Description Year", xlab="Range size", xlog=T, cex.lab=1.4)
a <- lowess(iucn$Description_Year~colSums(PAM$P[,-(1:2)]))
lines(a, col="red")
mtext(text="A", cex=1.4, adj=0, line=1)
par(mar=c(1, 1, 1, 5))
plot(mpl$ras, axes=FALSE, box=FALSE, col=colfunc(3000))
map(add=T)
text(labels="B", y=14, x=-78, cex=2)
par(mar=c(1, 1, 1, 5))
plot(mpl2$ra, axes=FALSE, box=FALSE, col=colfunc(2000))
map(add=T)
text(labels="C", y=14, x=-78, cex=2)
plot(x=mpl2$M[,3], y=mpl$M[,3] , cex=1.5, bty="l",
pch=20, ylab="Description Year", xlab="Range size", xlog=T, cex.lab=1.4)
#abline(lm(mpl$M[,3]~mpl2$M[,3]), col="red")
a <- lowess(mpl$M[,3]~mpl2$M[,3])
lines(a, col="red")
SI <- read.table("clipboard", sep="\t")
SI
S2 <- read.table("clipboard", sep="\t")
S2
dim(SI)
sim(S2)
dim(S2)
which(!SI%in%S2)
!SI%in%S2
which(!S2%in%SI)
S2%in%SI
S2
SI
match(S2,SI)
match(as.character(S2),as.character(SI))
as.character(S2)
S2
match(S2[,1],SI[,1])
which(!S2[,1]%in%SI[,1])
S2[392,1]
library(raster)
setwd("C:/Users/Bruno/SkyDrive/Paper Miguel e Brad/GVI")
list()
list.files()
?list.files
list.dir()
?list.files
dir()
listdirs()
list.dirs()
list.dir()
list.dirs()
diretorios <- list.dirs()
arquivos <- list.files(recursive=TRUE)
arquivos
arquivo[2]
arquivos[2]
raster(arquivos[2])
plot(raster(arquivos[2]))
plot(raster(arquivos[3]))
plot(raster(arquivos[4]))
plot(raster(arquivos[3]))
arquivos <- list.files(recursive=TRUE, pattern="dblbnd.adf")
arquivos
summer <- stack(arquivos[3:5])
summer
plot(summer)
plot(winter)
winter <- stack(arquivos[c(1,2,6)])
plot(winter)
library(maps)
map()
mundo <- map()
mundo
class(mundo)
summer_ter <- mask(summer, map)
?mask
length(summer)
nlayers(summer)
summer_ter <- summer
summer_ter[i]
summer_ter[1]
summer_ter[[1]]
plot(summer_ter[[1]])
summer_ter[[i]] <- mask(summer[[i]], map)
for(i in 1:nlayers(summer)){
summer_ter[[i]] <- mask(summer[[i]], map)
}
summer[[i]]
raster(summer, 1)
?mask
library(sp)
mundo
SpatialPolygon(mundo)
SpatialPolygons(mundo)
mask(summer, mundo)
for(i in 1:nlayers(summer)){
summer_ter[[i]] <- mask(summer[[i]], mundo)
}
mundo <- readShapePoly("world_car.shp")
??readShapePoly
library(maptools)
mundo <- readShapePoly("world_car.shp")
mundo
summer_ter <- mask(summer, mundo)
plot(summer_ter)
winter_ter <- mask(winter, mundo)
?merge
?stackApply
stackApply(summer_ter, 3, mean)
stackApply(summer_ter, 1:3, mean)
summer_ter_mean <- merge(summer_ter, c(1,1,1), mean)
summer_ter_mean <- merge(summer_ter, indices=c(1,1,1), fun=mean)
summer_ter_mean
plot(summer_ter_mean)
plot(summer_ter[[1]])
summer_ter_mean <- merge(summer_ter, indices=c(1,2,3), fun=mean)
summer_ter_mean
plot(summer_ter_mean)
plot(summer_ter[[1]])
summer_ter_mean <- merge(summer_ter, indices=c(1,2,3), fun=mean)
plot(summer_ter_mean)
c(1,2,3)
summer_ter_mean <- merge(summer_ter, indices=c(1,2,2), fun=mean)
plot(summer_ter_mean)
summer_ter_mean <- merge(summer_ter, indices=c(1,1,1), fun=mean)
summer_ter_mean
summer_ter_mean <- merge(summer_ter, indices=c(1,1,1), fun=min)
summer_ter_mean
summer_ter
summer_ter_mean
summer_ter
summer
summer
summer_ter_mean <- merge(summer, indices=c(1,1,1), fun=min)
summer_ter_mean
summer_ter_mean <- stackApply(summer_ter, indices=c(1,1,1), fun=min)
summer_ter_mean
plot(summer_ter_mean)
plot(summer_ter[[1]])
plot(summer_ter[[3]])
plot(summer_ter_mean)
winter_ter_mean <- stackApply(winter_ter, indices=c(1,1,1), fun=min)
summer_ter_mean <- stackApply(summer_ter, indices=c(1,1,1), fun=mean)
winter_ter_mean <- stackApply(winter_ter, indices=c(1,1,1), fun=mean)
winter_ter_mean
summer_ter_mean
plot(summer_ter_mean)
plot(winter_ter_mean)
plot(summer_ter_mean)
plot(winter_ter_mean)
?writeraster
?writeRaster
writeRaster(summer_ter_mean, "GVIsummer.asc")
writeRaster(winter_ter_mean, "GVIwinter.asc")
library(letsR)
