equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)21
moran <- lets.correl(runif(32), distan, 12,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 20,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 10,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 50,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 50,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = FALSE,
plot = FALSE)
moran
moran <- lets.correl(runif(32), distan, 21,
equidistant = FALSE,
plot = TRUE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = FALSE,
plot = FALSE)
moran <- lets.correl(runif(32), distan, 21,
equidistant = TRUE,
plot = FALSE)
x = runif(32)
y = distan
z = 21
equidistant = TRUE
plot = FALSE
if (any(is.na(x))) {
stop("Missing values in x argument")
}
if (class(y) == "dist") {
y <- as.matrix(y)
}
is.vector(x)
return1 <- .br.correlogram(x, y, z, equidistant, plot)
devtools::load_all(".")
return1 <- .br.correlogram(x, y, z, equidistant, plot)
y3 <- y
diag(y3) <- NA
y2 <- y
z2 <- 1 / z
!equidistant
quant <- seq(min(y), max(y), ((max(y) - min(y)) / z))
quant
quant <- as.vector(quant)
n <- length(quant)
ob <- rep(NA, (n - 1))
CI <- rep(NA, (n - 1))
ex <- rep(NA, (n - 1))
dist_cl <- rep(NA, (n - 1))
p <- rep(NA, (n - 1))
count <- rep(NA, (n - 1))
count
quant <- as.vector(quant)
n <- length(quant)
ob <- rep(NA, (n - 1))
CI <- rep(NA, (n - 1))
ex <- rep(NA, (n - 1))
dist_cl <- rep(NA, (n - 1))
p <- rep(NA, (n - 1))
count <- rep(NA, (n - 1))
n
for(i in 1:(n - 1)) {
if (i > 1) {
pos <- (y > quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
if (i == 1) {
pos <- (y >= quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
dist_cl [i] <- mean(c(quant[i], quant[i + 1]))
if (count[i] > 0) {
y2[pos] <- 1
y2[!pos] <- 0
m <- .br.moran(y2, x)
ob[i] <- m$observed
CI[i] <- m$ci
ex[i] <- m$expected
dist_cl[i] <- mean(c(quant[i], quant[i + 1]))
p[i] <- m$p.value
}
}
moran
n
i=21
pos <- (y > quant[i] & y <= quant[i + 1])
pos
diag(pos) <- FALSE
sum(pos)
count[i] <- sum(pos)
dist_cl [i] <- mean(c(quant[i], quant[i + 1]))
dist_cl
count[i]
y2[pos] <- 1
y2[!pos] <- 0
m <- .br.moran(y2, x)
w = y2
y = x
n <- sum(ifelse(rowSums(w) > 0, 1, 0))
n
z <- y - mean(y)
z
soma <- n * (sum(w * (z %o% z)))
divi <- sum(w) * sum((z ^ 2))
ob <- soma / divi
es <- -1 / (n - 1)
S1 <-  0.5 * sum((w + t(w)) ^ 2)
S2 <- sum((apply(w, 1, sum) + apply(w, 2, sum)) ^ 2)
k <- n * sum(z ^ 4) / ((sum(z ^ 2)) ^ 2)
s.sq <- sum(w) ^ 2
calc1 <- (n ^ 2 - 3 * n + 3) * S1 - n * S2 + 3 * s.sq
calc2 <- n * (n - 1) * S1 - 2 * n * S2 + 6 * s.sq
calc3 <- (n - 1) * (n - 2) * (n - 3) * s.sq
sdi <- sqrt((n * calc1 - k * calc2) / calc3 - 1/((n - 1) ^ 2))
n
calc1
k
calc2
calc3
1
n
calc3 - 1/((n - 1) ^ 2)
(n * calc1 - k * calc2)
(n * calc1 - k * calc2) / calc3 - 1/((n - 1) ^ 2)
sqrt(-0.09158177)
sqrt(0.09158177)
sqrt(-4)
?sqrt
sqrt(-)
sqrt(0)
calc3 - 1/((n - 1) ^ 2)
is.negative
library(letsR)
sqrt(0)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
?lets.correl
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
lets.correl(runif(32), y = distan, z = 21, equidistant = TRUE)
dista <- lets.distmat(PAM)
?lets.addvar
data(temp)  # Global mean temperature
data(PAM)  # Phyllomedusa presence-absence matrix
# Mean temperature
PAM_temp_mean <- lets.addvar(PAM, temp, onlyvar = TRUE)
lets.correl(x = PAM_temp_mean[, 3], y = dista, 12)
lets.correl(x = PAM_temp_mean[, 1], y = dista, 12)
lets.correl(x = PAM_temp_mean, y = dista, 12)
PAM_temp_mean
lets.correl(x = PAM_temp_mean, y = dista, 12)
lets.correl(x = PAM_temp_mean[, 1], y = dista, 12)
library(letsR)
lets.correl(x = PAM_temp_mean[, 1], y = dista, 12)
data(temp)  # Global mean temperature
data(PAM)  # Phyllomedusa presence-absence matrix
# Mean temperature
PAM_temp_mean <- lets.addvar(PAM, temp, onlyvar=T)
?lets.correl
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
distan <- lets.distmat(PAM)
lets.correl(x = PAM_temp_mean[, 1], y = dista, 12)
lets.correl(x = PAM_temp_mean[, 1], y = distan, 12)
lets.correl(x = PAM_temp_mean, y = distan, 12)
lets.correl(x = PAM_temp_mean, y = distan, 12, equidistant = TRUE)
if (any(is.na(x))) {
stop("Missing values in x argument")
}
x = PAM_temp_mean; y = distan; z = 12, equidistant = FALSE, plot = TRUE
x = PAM_temp_mean; y = distan; z = 12; equidistant = FALSE, plot = TRUE
x = PAM_temp_mean; y = distan; z = 12; equidistant = FALSE; plot = TRUE
if (any(is.na(x))) {
stop("Missing values in x argument")
}
# Allow dist classes
if (class(y) == "dist") {
y <- as.matrix(y)
}
# Check if it has one
if (is.matrix(x)) {
if (ncol(x) == 1) {
x <- as.vector(x)
}
}
is.vector(x)
y3 <- y
diag(y3) <- NA
y2 <- y
z2 <- 1 / z
if (!equidistant) {
quant <- quantile(y3, probs = seq(0, 1, z2),
na.rm = TRUE)
}
if (equidistant) {
quant <- seq(min(y), max(y), ((max(y) - min(y)) / z))
}
quant <- as.vector(quant)
n <- length(quant)
ob <- rep(NA, (n - 1))
CI <- rep(NA, (n - 1))
ex <- rep(NA, (n - 1))
dist_cl <- rep(NA, (n - 1))
p <- rep(NA, (n - 1))
count <- rep(NA, (n - 1))
for(i in 1:(n - 1)) {
if (i > 1) {
pos <- (y > quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
if (i == 1) {
pos <- (y >= quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
dist_cl [i] <- mean(c(quant[i], quant[i + 1]))
if (count[i] > 0) {
y2[pos] <- 1
y2[!pos] <- 0
m <- .br.moran(y2, x)
ob[i] <- m$observed
CI[i] <- m$ci
ex[i] <- m$expected
dist_cl[i] <- mean(c(quant[i], quant[i + 1]))
p[i] <- m$p.value
}
}
devtools::load_all(".")
y3 <- y
diag(y3) <- NA
y2 <- y
z2 <- 1 / z
if (!equidistant) {
quant <- quantile(y3, probs = seq(0, 1, z2),
na.rm = TRUE)
}
if (equidistant) {
quant <- seq(min(y), max(y), ((max(y) - min(y)) / z))
}
quant <- as.vector(quant)
n <- length(quant)
ob <- rep(NA, (n - 1))
CI <- rep(NA, (n - 1))
ex <- rep(NA, (n - 1))
dist_cl <- rep(NA, (n - 1))
p <- rep(NA, (n - 1))
count <- rep(NA, (n - 1))
for(i in 1:(n - 1)) {
if (i > 1) {
pos <- (y > quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
if (i == 1) {
pos <- (y >= quant[i] & y <= quant[i + 1])
diag(pos) <- FALSE
count[i] <- sum(pos)
}
dist_cl [i] <- mean(c(quant[i], quant[i + 1]))
if (count[i] > 0) {
y2[pos] <- 1
y2[!pos] <- 0
m <- .br.moran(y2, x)
ob[i] <- m$observed
CI[i] <- m$ci
ex[i] <- m$expected
dist_cl[i] <- mean(c(quant[i], quant[i + 1]))
p[i] <- m$p.value
}
}
resu <- cbind(ob, CI, ex, p, dist_cl, count)
resu
colnames(resu) <- c("Observed", "Confidence_Interval_(95%)",
"Expected_value", "p_value",
"Mean_Distance", "Count")
resu <- resu[!is.na(resu[, 1]), , drop = FALSE]
resu
plot1 = resu[, 5]
plot2 = resu[, 1]
plot3 = resu[, 2]
plot4 = resu[, 3]
z
epsilon <- max(plot1) / (14 * z)
epsilon
up <- plot2 + plot3
up
low <- plot2 - plot3
low
max(up)+0.2
min(low)-0.2)
min(low)-0.2
plot(x = plot1, y = plot2, bty = "l",
ylab = "Moran's I", xlab = "Distance",
type = "l", lty = 3,
ylim = c(max(up)+0.2, min(low)-0.2))
plot1
plot2
library(letsR)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
library(letsR)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
data(PAM)
data(IUCN)
# Spatial autocorrelation in description year (species level)
midpoint <- lets.midpoint(PAM)
distan <- lets.distmat(midpoint[, 2:3])
moran <- lets.correl(IUCN$Description, distan, 12,
equidistant = FALSE,
plot = TRUE)
?lets.addvar
data(temp)  # Global mean temperature
data(PAM)  # Phyllomedusa presence-absence matrix
# Mean temperature
PAM_temp_mean <- lets.addvar(PAM, temp, onlyvar = TRUE)
lets.correl(x = PAM_temp_mean, y = distan, z = 12, equidistant = FALSE, plot = TRUE)
PAM_temp_mean
distan
lets.correl(x = PAM_temp_mean, y = lets.distmat(PAM), z = 12, equidistant = FALSE, plot = TRUE)
lets.correl(x = PAM_temp_mean, y = lets.distmat(PAM), z = 3
32, equidistant = FALSE, plot = TRUE)
lets.correl(x = PAM_temp_mean, y = lets.distmat(PAM), z = 32, equidistant = FALSE, plot = TRUE)
