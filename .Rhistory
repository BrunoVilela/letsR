for(j in 1:n){
# Getting species position in the matrix and set to 1
par.re <- .extractpos.birds(valores,  shapes[j],
k, r, areashape, areagrid,
cover, presence, origin,
seasonal)
matriz[, (j + 2)] <- par.re[[1]]
nomes[j] <- par.re[[2]]
k <- par.re[[3]]
}
}
if (k == 0) {
stop("after filtering none species distribution left")
}
colnames(matriz) <- c("Longitude(x)", "Latitude(y)", nomes)
riqueza <- rowSums(matriz[, -c(1, 2), drop = FALSE])
# Remove cells without presence if TRUE
if (remove.cells) {
matriz <- .removeCells(matriz)
}
# Remove species without presence if TRUE
if (remove.sp) {
matriz <- .removeSp(matriz)
}
# Putting together species with more than one shapefile
matriz <- .unicas(matriz)
# Return result (depending on what the user want)
if (show.matrix) {
return(matriz)
} else {
values(r) <- riqueza
final <- list("Presence_and_Absence_Matrix" = matriz, "Richness_Raster" = r,
"Species_name" = (colnames(matriz)[-(1:2)]))
class(final) <- "PresenceAbsence"
return(final)
}
}
# Axuliar function to avoid code repetition inside the loop <<<<<<<<<
# Function to extract cell positions in the raster
.extractpos.birds <- function(valores, shapej, k, r,
areashape, areagrid, cover,
presence, origin, seasonal) {
# Vector to be filled
valores2 <- valores
# Read species shapefile, get its name and filter it
shp <- readShapePoly(shapej, delete_null_obj = TRUE,
force_ring = TRUE, proj4string = crs)
nomesj <- levels(shp$SCINAME)[1]
shp <- lets.shFilter(shp,
presence = presence,
origin = origin,
seasonal = seasonal)
# Just run if after filtering the species has any polygon
if (!is.null(shp)) {
k <- k + 1 # for later error control (see below)
#  Extract cell occurrence positions
cell <- extract(r, shp, cellnumber = T,
small = T, weights = T)
# Remove null cells
cell <- cell[!sapply(cell, is.null)]
# Changing colnames
l.cell <- length(cell)
if(l.cell > 0){
.rename <- function(x) {
colnames(x) <- 1:3
return(x)
}
cell <- lapply(cell, .rename)
}
# Getting row positions
cell2 <- do.call(rbind.data.frame, cell)
# Correcting presence based on the cover
if (cover > 0) {
areashape <- areaPolygon(shp)
prop <- numeric()
for (k1 in 1:l.cell) {
calc <- cell[[k1]][, 3] * areashape[k1] / areagrid[cell[[k1]][, 1]]
prop <- c(prop, calc)
}
prop.1 <- prop > 1
if (any(prop.1)) {
prop[prop.1] <- 1
}
cell2 <- cell2[prop >= cover, , drop = FALSE]
}
valores2[cell2[, 1]] <- 1
}
return(list(valores2, nomesj, k))
}
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=20,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
proj4string
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=20,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
library(letsR)
path.Ramphastos <- "C:/Users/Bruno/SkyDrive/letsR/letsR/extdata/Ramphastos"
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=20,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
PAM
summary(PAM)
plot(PAM)
plot(PAM)
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=30,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
PAM
plot(PAM)
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.2, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.5, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
context("Test for lets.presab.birds")
# Path
# library(devtools)
# load_all(".")
# path.Ramphastos <- system.file("extdata", package = "letsR")
path.Ramphastos <- "C:/Users/Bruno/SkyDrive/letsR/letsR/extdata/Ramphastos"
test_that("lets.presab.birds return a correct PresenceAbsence object", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab.birdsreturn a correct PresenceAbsence object for the world", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, resol=5, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.2, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab.birdsreturn a correct PresenceAbsence object (count=TRUE)", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=TRUE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab.birdsreturn a correct PresenceAbsence object, cover=0.2", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.2, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab.birdsreturn a correct PresenceAbsence object, remove.sp=FALSE", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=FALSE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=1, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Specieswithoutanypresence > 0)
})
test_that("lets.presab.birdsreturn a correct PresenceAbsence object, remove.cells=FALSE", {
skip_on_cran()
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=FALSE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Cellswithoutanypresence > 0)
})
context("Test for lets.presab")
test_that("lets.presab return a correct PresenceAbsence object", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab return a correct PresenceAbsence object for the world", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, resol=5, remove.cells=TRUE,
remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"),
cover=0, presence=NULL, origin=NULL,
seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab return a correct PresenceAbsence object (count=TRUE)", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=TRUE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab return a correct PresenceAbsence object, cover=0.2", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.2, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
})
test_that("lets.presab return a correct PresenceAbsence object, remove.sp=FALSE", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=FALSE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0.2, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Specieswithoutanypresence > 0)
})
test_that("lets.presab return a correct PresenceAbsence object, remove.cells=FALSE", {
skip_on_cran()
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=FALSE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
response <- summary(PAM)
expect_true(response$Cellswithoutanypresence > 0)
})
data(Phyllomedusa)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
expect_equal(class(PAM), "PresenceAbsence")
expect_equal(class(PAM[[1]]), "matrix")
expect_true(inherits(PAM[[2]], "RasterLayer"))
expect_equal(class(PAM[[3]]), "character")
library(letsR)
library(letsR)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
PAM <- lets.presab(Phyllomedusa, xmn=-93, xmx=-29, ymn= -57, ymx=15,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=cea +lat_ts=30"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
PAM <- lets.presab(Phyllomedusa, resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=cea +lat_ts=30"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
PAM[[2]]
plot(PAM[[2]])
library(devtools)
install_github("BrunoVilela/letsR")
system.file("extdata", package = "letsR")
system.file("extdata", package = "letsR")
system.file("tests", package = "letsR")
library(letsR)
path.Ramphastos <- system.file("extdata", package = "letsR")
path.Ramphastos
library(letsR)
?rainbow
?Palettes
c<- heat.colors
c(100)
library(letsR)
data(PAM)
plot(PAM)
?plot.presab
?plot.PresenceAbsence
library(letsR)
data(PAM)
plot(PAM)
library(letsR)
plot(PAM, back="blue")
plot(PAM, col=colorRampPalette(c("green", "yellow", "red")))
warnings()
plot(PAM)
library(colorRamps)
matlab.like
?rgd.tables
path.Ramphastos <- system.file("extdata", package = "letsR")
PAM <- lets.presab.birds(path.Ramphastos, xmn=-93, xmx=-29, ymn= -57, ymx=25,
resol=1, remove.cells=TRUE, remove.sp=TRUE, show.matrix=FALSE,
crs=CRS("+proj=longlat +datum=WGS84"), cover=0, presence=NULL,
origin=NULL, seasonal=NULL, count=FALSE)
plot(PAM)
plot(PAM, bg="gray")
plot(PAM, lty=2)
plot.raster
?plot
plot(PAM, interpolate=TRUE)
plot(PAM, interpolate=TRUE, col=colorRampPalette("blue", "red"))
plot(PAM, interpolate=TRUE, col=colorRampPalette(c("blue", "red")))
plot(PAM, interpolate=TRUE, col=colorRampPalette(c("blue", "green", "yellow", red")))
plot(PAM, interpolate=TRUE, col=colorRampPalette(c("blue", "green", "yellow", "red")))
plot(PAM)
plot(PAM, main="Birds")
?plot.PresenceAbsence
?plot.PresenceAbsence
library(letsR)
data(PAM)
plot(PAM)
plot(PAM, name="Phyllomedusa atelopoides")
plot(PAM, name="Phyllomedusa azurea")
plot(PAM)
data(PAM)
library(letsR)
plot(PAM, col=raimbow)
plot(PAM, col=rainbow)
plot(PAM, col=terrain.colors)
plot(PAM, col=terrain.colors, xlabel="Longitude")
plot(PAM, col=terrain.colors, xlab="Longitude")
plot(PAM, col=terrain.colors, xlab="Longitude", ylab="Latitude")
plot(PAM, col=terrain.colors, xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, col=heat.colors, xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, col=rev(heat.colors), xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, col=colorRampPalette(c("gray", "yellow", "red")), xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, col=colorRampPalette(c("yellow", "red")), xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, col=colorRampPalette(c("yellow","orange", "red")), xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, xlab="Longitude", ylab="Latitude", main = "Phyllomedusa richness")
plot(PAM, xlab="Longitude", ylab="Latitude", main = "Phyllomedusa species richness")
library(letsR)
library(letsR)
path.Ramphastos <- system.file("extdata", package = "letsR")
PAM <- lets.presab.birds(path.Ramphastos, xmn = -93, xmx = -29,
ymn = -57, ymx = 25)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Ramphastos species Richness")  # Species richness map
data(Phyllomedusa)  # Spatial distribution polygons of south american frogs of genus Phyllomedusa.
PAM <- lets.presab(Phyllomedusa, xmn = -93, xmx = -29, ymn = -57, ymx = 15)
summary(PAM)
# Species richness map
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness")
library(letsR)
path.Ramphastos <- system.file("extdata", package = "letsR")
PAM <- lets.presab.birds(path.Ramphastos, xmn = -93, xmx = -29,
ymn = -57, ymx = 25)
# Species richness map
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Ramphastos species Richness")
summary(PAM)
plot(PAM, name="Ramphastos culminatus")
plot(PAM, name="Ramphastos culminatus", interpolate = TRUE)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness", interpolate = TRUE)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness", interpolate = F)
library(letsR)
data(PAM)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness", interpolate = F)
library(letsR)
plot(PAM, xlab = "Longitude", ylab = "Latitude",
main = "Phyllomedusa species richness", interpolate = F)
library(letsR)
?rstudio
??rstudio
is.RStudio
library(installr)
is.RStudio
"tools:rstudio" %in% search()
!"tools:rstudio" %in% search()
library(letsR)
data(PAM)
plot(PAM)
plot(PAM) -> a
a
class(a)
data(PAM)
plot(PAM) -> a
a
library(letsR)
data(PAM)
plot(PAM) -> a
a
library(letsR)
data(PAM)
summary(PAM)
#' Print summary for object of class PresenceAbsence
#' @author Bruno Vilela
#'
#' @description Print summary for objects of class PresenceAbsence.
#'
#' @usage
#' \method{print.summary}{PresenceAbsence}(x, \dots)
#'
#' @param x an object of class PresenceAbsence (see function presab).
#' @param ... Other print parameters.
#'
#' @S3method print summary.PresenceAbsence
print.summary.PresenceAbsence <- function(x, ...){
cat("\nClass:", x$class)
cat("\n_ _")
cat("\nNumber of species:", x$Numberofspecies,
"\nNumber of cells:", x$Numberofcells)
cat("\nCells with presence:", x$Cellswithpresence)
cat("\nCells without presence:", x$Cellswithoutanypresence)
cat("\nSpecies without presence:", x$Specieswithoutanypresence)
cat("\nSpecies with the largest range:", x$SpeciesLargestRange)
cat("\n_ _")
cat("\nGrid parameters")
cat("\nResolution: ", x$resolution[1], ", ", x$resolution[2],
" (x, y)", sep="")
cat("\nExtention: ", xmin(x$ex), ", ",  xmax(x$ex), ", ", ymin(x$ex), ", ", ymax(x$ex), " (xmin, xmax, ymin, ymax)", sep="")
cat("\nCoord. Ref.: ", x$coordRef)
}
summary(PAM)
#' Print summary for object of class PresenceAbsence
#' @author Bruno Vilela
#'
#' @description Print summary for objects of class PresenceAbsence.
#'
#' @usage
#' \method{print.summary}{PresenceAbsence}(x, \dots)
#'
#' @param x an object of class PresenceAbsence (see function presab).
#' @param ... Other print parameters.
#'
#' @S3method print summary.PresenceAbsence
print.summary.PresenceAbsence <- function(x, ...){
cat("\nClass:", x$class)
cat("\n_ _")
cat("\nNumber of species:", x$Numberofspecies,
"\nNumber of cells:", x$Numberofcells)
cat("\nCells with presence:", x$Cellswithpresence)
cat("\nCells without presence:", x$Cellswithoutanypresence)
cat("\nSpecies without presence:", x$Specieswithoutanypresence)
cat("\nSpecies with the largest range:", x$SpeciesLargestRange)
cat("\n_ _")
cat("\nGrid parameters")
cat("\nResolution: ", x$resolution[1], ", ", x$resolution[2],
" (x, y)", sep = "")
cat("\nExtention: ", xmin(x$ex), ", ",  xmax(x$ex), ", ",
ymin(x$ex), ", ", ymax(x$ex), " (xmin, xmax, ymin, ymax)",
sep = "")
cat("\nCoord. Ref.: ", x$coordRef)
}
summary(PAM)
cat("bruno")
cat("bruno", font=list(italic))
cat("bruno", font=list(face="italic"))
cat("bruno", face="italic")
args(cat)
?cat
expression(paste("bruno"))
cat(expression(paste("bruno")))
print(expression(paste("bruno")))
italic("bruno")
print(expression(paste(italic("bruno"))))
paste(expression(paste(italic("bruno"))))
cat(expression(paste(italic("bruno"))))
cat("style = italic\n", file = temp, append = TRUE)
cat("style = italic\n", append = TRUE)
cat("style = italic\n", file= "oi", append = TRUE)
cat("style = italic\n", file= "oi", append = TRUE)
cat(expression(paste(italic("bruno"))), append=TRUE)
library(letsR)
library(letsR)
