library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
data(PAM)
names(PAM)
#' - (\code{\link{lets.addpoly}}\cr
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(devtools)
use_travis
?use_travis
use_travis("letsR")
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?sudo
??sudo
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
binomialerror <- length(unlist(strsplit(input, "-"))) == 2
binomialerror
binomialerror <- length(unlist(strsplit(input, " "))) == 2
binomialerror
strsplit(input, " ")
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) == 2})
binomialerror
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) != 2})
binomialerror
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva")
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) != 2})
binomialerror
sps <- which(binomialerror)
sps
?lets.iucn
library(letsR)
?lets.iucn
sps_name <- paste(input[sps], "\n")
sps_name
nchar(input)
?substr
substr(input, 1, 1)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela")
substr(input, 1, 1) == " "
removespace <- substr(input, 1, 1) == " "
substr(input[removespace], 1, 1) <- ""
input
removespace <- substr(input, 1, 1) == " "
removespace
input[removespace]
substr(input[removespace], 1, 1)
substr(input[removespace], 1, 1) <- ""
input
substring(input[removespace], 2)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela",
, " Bruno Vilela")
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela",
" Bruno Vilela")
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input
as.vector(input)
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name)
}
return(input)
}
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name)
}
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name))
}
return(input)
}
.getnames(input)
input
library(letsR)
devtools::load_all(".")
devtools::load_all(".")
.getnames(" Bruno")
.getnames(rep(" Bruno"), 20)
.getnames(rep(" Bruno", 20))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:"),
paste(sps_name)))
}
return(input)
}
.getnames(rep(" Bruno", 20))
warning(paste(paste("The following species do not follow a binomial nomeclature:"),
sps_name))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:"),
sps_name))
}
return(input)
}
.getnames(rep(" Bruno", 20))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:"),
paste(sps_name, collapse = ""))
}
return(input)
}
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:"),
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames(rep(" Bruno", 20))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
sps_name <- paste("\t", input[sps])
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:\n"),
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames(rep(" Bruno", 20))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
sps_name <- paste("  ", input[sps])
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:\n"),
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames(rep(" Bruno", 20))
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste("\t", input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste(paste("The following species do not follow a binomial nomeclature:\n"),
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames(rep(" Bruno", 20))
library(letsR)
lets.iucn("Bruno Vilela")
lets.iucn("Bruno Vilela sop")
lets.iucn("Panthera onca")
lets.iucn("Panthera onca ")
lets.iucn(" Panthera onca")
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining and end
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
removespace2 <- substr(input, nchar(input), nchar(input)) == " "
input[removespace] <- substring(input[removespace2], nchar(input))
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste("\t", input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:\n",
paste(sps_name, collapse = "")))
}
return(input)
}
.getname("Panthera onca ")
.getnames("Panthera onca ")
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining and end
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
removespace2 <- substring(input, nchar(input)) == " "
input[removespace] <- substring(input[removespace2], nchar(input))
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste("\t", input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:\n",
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames("Panthera onca ")
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining and end
# returns string w/o leading or trailing whitespace
trim <- function(x) {gsub("^\\s+|\\s+$", "", x)}
input <- trim(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste("\t", input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:\n",
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames("Panthera onca ")
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining and end
# returns string w/o leading or trailing whitespace
trim <- function(x) {gsub("^\\s+|\\s+$", "", x)}
input <- as.vector(trim(input))
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste("\t", input[sps], "\n")
# Error in species name control
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:\n",
paste(sps_name, collapse = "")))
}
return(input)
}
.getnames("Panthera onca ")
.getnames(" Panthera onca")
.getnames(" Panthera onca ")
.getnames(rep(" Panthera onca "), 20)
.getnames(rep(" Panthera onca ", 20))
.getnames(c(rep(" Panthera onca ", 20), "bruno"))
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?plot.PresenceAbsence
library(letsR)
plot(PAM)
plot(PAM, col_rich = raimbow.colors)
plot(PAM, col_rich = heat.colors)
data(iucn)
data(IUCN)
head(IUCN)
