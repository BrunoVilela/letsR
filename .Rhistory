cat("\aBRUNO \aOI")
cat("\aBRUNO\aOI")
cat("\aBRUNO \eOI")
cat("\aBRUNO \fOI")
cat("\fOI")
cat("\fOI Bruno")
cat("\rOI Bruno")
cat("\rOI Bruno")
cat("\rOI Bruno\r oi")
cat("Bruno\r oi")
cat("Bruno \r oi")
cat(" \r oi Bruno")
devtools::load_all(".")
library(XML)
input <- "Pongo pygmaeus"
input <- gsub(as.matrix(input), pattern = " ",
replacement = "-")
h <- try(htmlParse(paste("http://api.iucnredlist.org/go/",
input, sep = "")),
silent = TRUE)
class(h)[1] != "try-error"
h
b <- try(xpathSApply(h, '//div', xmlValue), silent = TRUE)[1]
b
c <- as.numeric(gsub("\\D", "", b))
c
http <- "http://www.iucnredlist.org/details/summary/"
h1 <- try(htmlParse(paste(http, c, "/0", sep = "")),
silent = TRUE)
h1
links <- xpathSApply(h1, "//a/@href")
links
links <- strsplit(links, "\n")
links
parents <- xpathSApply(h1, "//a")
parents
lets.iucn("Pongo pygmaeus")
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
lets.iucn(sp)
testiucn <- lets.iucn(sp)
testiucn2 <- lets.iucn(sp, count = TRUE)
library(testthat)
testiucn <- lets.iucn("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
library(letsR)
?lets.iucn
library(letsR)
?letsR
library(letsR)
?letsR
library(letsR)
library(letsR)
?letsR
library(letsR)
?letsR
library(letsR)
?letsR
input <- "bruno vilela"
length(strsplit(input, "-"))
length(strsplit(input, " "))
strsplit(input, " ")
input <- "bruno-vilela"
length(unlist(strsplit(input, "-")))
library(letsR)
?lets.iucn.his
library(letsR)
?lets.iucn.his
library(letsR)
lets.iucn.his("Panthera onca")
sp <- c("Rhincodon typus", "Ailuropoda melanoleuca")
lets.iucn.his(sp)
sp <- c("Rhincodon typus", "Ailuropoda melanoleuca")
lets.iucn.his(sp, count = TRUE)
library(testthat)
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
testiucn <- lets.iucn.his("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
testiucn <- lets.iucn.his(sp)
input <-  c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
count = FALSE
if (class(input) == "PresenceAbsence") {
input <- input$S
}
input <- gsub(input, pattern = "_", replacement = " ")
n <- length(input)
# Automate date
data <- date()
anofinal <- substr(data, (nchar(data) - 3), nchar(data))
anos <- 1980:anofinal
#Empty matrix
resus <- matrix(ncol = length(anos), nrow = n)
colnames(resus) <- anos
# With count window
i=1
.Hist(input[i], anos)
devtools::load_all(".")
.Hist(input[i], anos)
i=2
.Hist(input[i], anos)
i=3
.Hist(input[i], anos)
matriz <- matrix("NE", ncol = length(anos))
colnames(matriz) <- anos
c <- .getcode(input)
c
input <- gsub(as.matrix(input), pattern = " ",
replacement = "-")
input
input <- input[i]
c <- .getcode(input)
c
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
library(XML)
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
h2
ano1 <- try(xpathSApply(h2, '//div[@id="modified_year"]', xmlValue),
silent = TRUE)
ano1
ameaca1 <- try(xpathSApply(h2, '//div[@id="red_list_category_code"]',
xmlValue),
silent = TRUE)
ameaca1
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
ano1
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a <- a[2]
a <- gsub("\n", "", a)
a <- gsub("\t", "", a)
b <- strsplit(a, "          ")[[1]]
b <- strsplit(b, "      ")
c <- do.call("rbind", b)
c <- matrix(c, ncol = 1)
dupc <- duplicated(c)
if (any(dupc)) {
c <- c[!dupc, , drop = FALSE]
}
ano <- substr(gsub("\\D", "", c), 1, 4)
ano
a
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")
c <- .getcode(input)
c
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
h
a
a
library(letsR)
input <-  c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
lets.iucn.his(input)
lets.iucn.his(input, count = TRUE)
input <- "Cebus flavius"
count = FALSE
if (class(input) == "PresenceAbsence") {
input <- input$S
}
input <- gsub(input, pattern = "_", replacement = " ")
n <- length(input)
# Automate date
data <- date()
anofinal <- substr(data, (nchar(data) - 3), nchar(data))
anos <- 1980:anofinal
#Empty matrix
resus <- matrix(ncol = length(anos), nrow = n)
colnames(resus) <- anos
i=1
.Hist(input[i], anos)
devtools::load_all(".")
library(XML)
.Hist(input[i], anos)
matriz <- matrix("NE", ncol = length(anos))
colnames(matriz) <- anos
c <- .getcode(input)
c
h2 <- try(htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = "")),
silent=TRUE)
ano1 <- try(xpathSApply(h2, '//div[@id="modified_year"]', xmlValue),
silent = TRUE)
ameaca1 <- try(xpathSApply(h2, '//div[@id="red_list_category_code"]',
xmlValue),
silent = TRUE)
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a <- a[2]
a
a
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
c =1010101010
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
h
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
c <- .getcode(input)
is.null(c)
h2 <- htmlParse(paste("http://api.iucnredlist.org/details/",
c, "/0", sep = ""))
ano1 <- xpathSApply(h2, '//div[@id="modified_year"]', xmlValue)
ameaca1 <- xpathSApply(h2, '//div[@id="red_list_category_code"]', xmlValue)
h <- try(htmlParse(paste("http://www.iucnredlist.org/details/full/",
c, "/0", sep = "")),
silent = TRUE)
a <- try(xpathSApply(h, '//td[table]', xmlValue),
silent = TRUE)
a
a <- a[2]
a
library(letsR)
input <- "Cebus flavius"
lets.iucn.his(input, count = TRUE)
library(letsR)
lets.iucn.his(input, count = TRUE)
input <- "Cebus flavius"
lets.iucn.his(input, count = TRUE)
lets.iucn.his("Bruno Vilela", count = TRUE)
lets.iucn.his("Bruno", count = TRUE)
library(testhat)
library(testthat)
sp <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
testiucn <- lets.iucn.his("Panthera tigris")
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca")
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his("Panthera tigris", count = TRUE)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his("Panthera onca", count = TRUE)
expect_equal(class(testiucn2), "data.frame")
testiucn <- lets.iucn.his(sp)
expect_equal(class(testiucn), "data.frame")
testiucn2 <- lets.iucn.his(sp, count = TRUE)
expect_equal(class(testiucn2), "data.frame")
expect_equal(testiucn, testiucn2)
?lets.presab
library(maptools)
library(testhat)
library(testthat)
xy <- cbind(1:10, 1:10)
species <- rep(c('Milvus milvus', 'Buteo buteo'), each = 5)
PresAbMat <- lets.presab.points(xy, species)
expect_equal(class(PresAbMat), "PresenceAbsence")
expect_equal(dim(PresAbMat[[1]]), c(10, 4))
expect_equal(sum(PresAbMat[[1]][,3]), 5)
expect_equal(sum(PresAbMat[[1]][,4]), 5)
expect_true(inherits(PresAbMat[[2]], "RasterLayer"))
# Species list as factor not character
species <- factor(rep(c('Milvus milvus', 'Buteo buteo'), each = 5))
PresAbMat <- lets.presab.points(xy, species)
expect_equal(class(PresAbMat), "PresenceAbsence")
# Check other projections
crsdfi <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
expect_equal(class(PresAbMat), "PresenceAbsence")
crsdfi <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
crsdfi
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
crsdif <- CRS("+proj=lcc +lat_1=48 +lat_2=33 +lon_0=-100 +ellps=WGS84")
PresAbMat <- lets.presab.points(xy, species, crs=crsdif)
PresAbMat
expect_equal(class(PresAbMat), "PresenceAbsence")
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
?PresenceAbsence
library(letsR)
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
data(PAM)
names(PAM)
#' - (\code{\link{lets.addpoly}}\cr
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(devtools)
use_travis
?use_travis
use_travis("letsR")
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?PresenceAbsence
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
?sudo
??sudo
library(letsR)
library(letsR)
library(letsR)
library(letsR)
library(letsR)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius")
binomialerror <- length(unlist(strsplit(input, "-"))) == 2
binomialerror
binomialerror <- length(unlist(strsplit(input, " "))) == 2
binomialerror
strsplit(input, " ")
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) == 2})
binomialerror
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) != 2})
binomialerror
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva")
binomialerror <- sapply((strsplit(input, " ")), function(x){length(x) != 2})
binomialerror
sps <- which(binomialerror)
sps
?lets.iucn
library(letsR)
?lets.iucn
sps_name <- paste(input[sps], "\n")
sps_name
nchar(input)
?substr
substr(input, 1, 1)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela")
substr(input, 1, 1) == " "
removespace <- substr(input, 1, 1) == " "
substr(input[removespace], 1, 1) <- ""
input
removespace <- substr(input, 1, 1) == " "
removespace
input[removespace]
substr(input[removespace], 1, 1)
substr(input[removespace], 1, 1) <- ""
input
substring(input[removespace], 2)
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela",
, " Bruno Vilela")
input <- c("Musonycteris harrisoni", "Ailuropoda melanoleuca",
"Cebus flavius", "Bruno", "Bruno VIlela silva", " Bruno Vilela",
" Bruno Vilela")
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input
as.vector(input)
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name)
}
return(input)
}
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name)
}
# Function to get and fix species names
# Used inside lets.iucn functions
# Bruno Vilela
.getnames <- function(input) {
# Get species from a PAM
if (class(input) == "PresenceAbsence") {
input <- input$S
}
# Accept species separeted by underline or space
input <- gsub(as.matrix(input), pattern = "_",
replacement = " ")
# Remove space from the beggining
removespace <- substr(input, 1, 1) == " "
input[removespace] <- substring(input[removespace], 2)
input <- as.vector(input)
binomialerror <- sapply((strsplit(input, " ")),
function(x){length(x) != 2})
sps <- which(binomialerror)
sps_name <- paste(input[sps], "\n")
if (length(sps) > 0) {
warning(paste("The following species do not follow a binomial nomeclature:",
sps_name))
}
return(input)
}
.getnames(input)
input
library(letsR)
